{"ast":null,"code":"var _jsxFileName = \"D:\\\\Usuarios\\\\FRANCO\\\\Desktop\\\\parroquav3\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Cargar usuario desde localStorage al inicio y verificar token\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         // Verificar si el token es v√°lido\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: {\n//               'Authorization': `Bearer ${accessToken}`,\n//             },\n//           });\n\n//           if (!response.ok) {\n//             // Token inv√°lido, intentar refrescar\n//             await refreshToken();\n//           }\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//         console.log('üîê Intentando login con:', email);\n\n//         const response = await fetch('http://localhost:5000/api/auth/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password }),\n//         });\n\n//         const data = await response.json();\n//         console.log('üì¶ Respuesta del login:', data);\n\n//         if (response.ok) {\n//             console.log('‚úÖ Login exitoso. Tokens recibidos:');\n//             console.log('Access Token:', data.access_token ? 'S√ç' : 'NO');\n//             console.log('Refresh Token:', data.refresh_token ? 'S√ç' : 'NO');\n//             console.log('User:', data.user ? 'S√ç' : 'NO');\n\n//             // Guardar en localStorage\n//             localStorage.setItem('access_token', data.access_token);\n//             localStorage.setItem('refresh_token', data.refresh_token);\n//             localStorage.setItem('user', JSON.stringify(data.user));\n\n//             console.log('üíæ Token guardado en localStorage:', \n//                 localStorage.getItem('access_token') ? 'S√ç' : 'NO');\n\n//             setUser(data.user);\n//             return { success: true, user: data.user };\n//         } else {\n//             console.log('‚ùå Error en login:', data.error);\n//             return { success: false, error: data.error || 'Error en el login' };\n//         }\n//     } catch (error) {\n//         console.log('üåê Error de conexi√≥n:', error);\n//         return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${token}`,\n//           },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': `Bearer ${refreshToken}`,\n//         },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         // üîß Si se genera un nuevo refresh token, reemplazar el anterior\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   // Funci√≥n para hacer requests autenticadas con refresh autom√°tico\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     // Si el token expir√≥, intentar refrescar y reenviar la request\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ \n//       user, \n//       login, \n//       logout, \n//       hasPermission, \n//       loading,\n//       authFetch \n//     }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [sessionExpiring, setSessionExpiring] = useState(false);\n\n  // ‚öôÔ∏è CONFIGURACI√ìN DE TIEMPOS (m√°s legible)\n  // Formato: { minutos: X, segundos: Y }\n  const TIEMPO_CONFIG = {\n    TOKEN_DURACION: {\n      minutos: 1,\n      segundos: 0\n    },\n    // Igual que backend\n    REFRESH_ANTICIPADO: {\n      minutos: 0,\n      segundos: 10\n    },\n    // 10s antes de expirar\n    AVISO_INACTIVIDAD: {\n      minutos: 0,\n      segundos: 45\n    },\n    // Aviso a los 45s\n    LOGOUT_INACTIVIDAD: {\n      minutos: 1,\n      segundos: 0\n    } // Logout a 1 min\n  };\n\n  // üîß Funci√≥n helper para convertir a milisegundos\n  const aMs = config => (config.minutos * 60 + config.segundos) * 1000;\n\n  // Constantes calculadas (NO MODIFICAR)\n  const ACCESS_TOKEN_LIFETIME = aMs(TIEMPO_CONFIG.TOKEN_DURACION);\n  const REFRESH_BEFORE_EXPIRY = aMs(TIEMPO_CONFIG.REFRESH_ANTICIPADO);\n  const INACTIVITY_WARNING = aMs(TIEMPO_CONFIG.AVISO_INACTIVIDAD);\n  const INACTIVITY_TIMEOUT = aMs(TIEMPO_CONFIG.LOGOUT_INACTIVIDAD);\n  const COUNTDOWN_SECONDS = Math.floor((INACTIVITY_TIMEOUT - INACTIVITY_WARNING) / 1000);\n  const [countdown, setCountdown] = useState(COUNTDOWN_SECONDS);\n\n  // üîí REFS para control de estado y prevenci√≥n de race conditions\n  const countdownRef = useRef(null);\n  const inactivityTimerRef = useRef(null);\n  const totalSessionTimerRef = useRef(null);\n  const sessionExpiringRef = useRef(sessionExpiring);\n  const refreshTimerRef = useRef(null);\n  const isRefreshingRef = useRef(false);\n  const refreshPromiseRef = useRef(null);\n  const tokenExpiryTimeRef = useRef(null);\n  const lastActivityTimeRef = useRef(0);\n  useEffect(() => {\n    sessionExpiringRef.current = sessionExpiring;\n  }, [sessionExpiring]);\n\n  // ========================\n  // üü¢ Inicializaci√≥n de sesi√≥n\n  // ========================\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const savedUser = localStorage.getItem('user');\n      const accessToken = localStorage.getItem('access_token');\n      if (savedUser && accessToken) {\n        setUser(JSON.parse(savedUser));\n\n        // Establecer tiempo de expiraci√≥n del token\n        const tokenExpiry = localStorage.getItem('token_expiry');\n        if (tokenExpiry) {\n          tokenExpiryTimeRef.current = parseInt(tokenExpiry);\n          scheduleTokenRefresh();\n        }\n        try {\n          const response = await fetch('http://localhost:5000/api/users/profile', {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${accessToken}`\n            }\n          });\n          if (!response.ok) {\n            // Token inv√°lido, intentar refresh\n            await refreshToken();\n          }\n        } catch (error) {\n          console.error('Error verificando token:', error);\n          await logout();\n        }\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n\n  // ========================\n  // üîÅ Sincronizar logout entre pesta√±as\n  // ========================\n  useEffect(() => {\n    const syncLogout = e => {\n      if (e.key === 'logout_event') {\n        setUser(null);\n        localStorage.removeItem('user');\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('token_expiry');\n        // NO usar navigate aqu√≠, ProtectedRoutes lo manejar√°\n      }\n    };\n    window.addEventListener('storage', syncLogout);\n    return () => window.removeEventListener('storage', syncLogout);\n  }, []);\n\n  // ========================\n  // üîÑ REFRESH PROACTIVO (antes de que expire)\n  // ========================\n  const scheduleTokenRefresh = () => {\n    // Limpiar timer anterior\n    if (refreshTimerRef.current) {\n      clearTimeout(refreshTimerRef.current);\n    }\n    const expiryTime = tokenExpiryTimeRef.current;\n    if (!expiryTime) return;\n    const now = Date.now();\n    const timeUntilExpiry = expiryTime - now;\n    const timeUntilRefresh = timeUntilExpiry - REFRESH_BEFORE_EXPIRY;\n    console.log(`üïê Token expira en: ${Math.round(timeUntilExpiry / 1000)}s`);\n    console.log(`üîÑ Programando refresh en: ${Math.round(timeUntilRefresh / 1000)}s`);\n\n    // Solo programar refresh si tiene sentido (token a√∫n v√°lido y no cerca de expirar)\n    if (timeUntilRefresh > 0 && timeUntilExpiry > 0) {\n      refreshTimerRef.current = setTimeout(async () => {\n        console.log('üîÑ Ejecutando refresh proactivo...');\n        const success = await refreshToken();\n\n        // Si el refresh falla, no programar otro (evita loop infinito)\n        if (!success) {\n          console.log('‚ùå Refresh fall√≥, no se programa otro');\n        }\n      }, timeUntilRefresh);\n    } else if (timeUntilExpiry > 0 && timeUntilExpiry <= REFRESH_BEFORE_EXPIRY) {\n      // Token est√° muy cerca de expirar, refresh inmediato\n      console.log('‚ö†Ô∏è Token muy cerca de expirar, refresh inmediato');\n      refreshToken();\n    } else {\n      // Token ya expir√≥\n      console.log('‚ö†Ô∏è Token ya expir√≥');\n    }\n  };\n\n  // ========================\n  // üîí REFRESH CON LOCK (evita m√∫ltiples llamadas simult√°neas)\n  // ========================\n  const refreshToken = async () => {\n    // Si ya hay un refresh en progreso, esperar a que termine\n    if (isRefreshingRef.current && refreshPromiseRef.current) {\n      console.log('‚è≥ Refresh en progreso, esperando...');\n      return refreshPromiseRef.current;\n    }\n\n    // Marcar que estamos haciendo refresh\n    isRefreshingRef.current = true;\n    refreshPromiseRef.current = (async () => {\n      try {\n        const refreshToken = localStorage.getItem('refresh_token');\n        if (!refreshToken) {\n          console.log('‚ùå No hay refresh token');\n          await logout();\n          return false;\n        }\n        console.log('üîÑ Ejecutando refresh token...');\n        const response = await fetch('http://localhost:5000/api/auth/refresh', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${refreshToken}`\n          }\n        });\n        const data = await response.json();\n        if (response.ok) {\n          console.log('‚úÖ Refresh exitoso');\n\n          // Guardar nuevos tokens\n          localStorage.setItem('access_token', data.access_token);\n          if (data.refresh_token) {\n            localStorage.setItem('refresh_token', data.refresh_token);\n          }\n\n          // Calcular y guardar tiempo de expiraci√≥n\n          const expiryTime = Date.now() + ACCESS_TOKEN_LIFETIME;\n          localStorage.setItem('token_expiry', expiryTime.toString());\n          tokenExpiryTimeRef.current = expiryTime;\n          if (data.user) {\n            // Evitar reiniciar timers por cambios de referencia del usuario durante refresh\n            if (!user) {\n              setUser(data.user);\n              localStorage.setItem('user', JSON.stringify(data.user));\n            }\n          }\n\n          // ‚úÖ CR√çTICO: Solo programar pr√≥ximo refresh si NO es un refresh proactivo repetitivo\n          // El pr√≥ximo refresh se programar√° solo cuando sea necesario (por authFetch o nuevo login)\n          console.log('‚úÖ Token renovado, NO se programa refresh autom√°tico adicional');\n          return true;\n        } else {\n          console.log('‚ùå Refresh fall√≥:', data.error);\n          await logout();\n          return false;\n        }\n      } catch (error) {\n        console.error('‚ùå Error en refresh:', error);\n        await logout();\n        return false;\n      } finally {\n        // Liberar el lock\n        isRefreshingRef.current = false;\n        refreshPromiseRef.current = null;\n      }\n    })();\n    return refreshPromiseRef.current;\n  };\n\n  // ========================\n  // ‚è∞ Control de inactividad (SEPARADO del refresh de token)\n  // ========================\n  useEffect(() => {\n    if (!user) return;\n    const resetInactivityTimers = () => {\n      // NO resetear si el modal ya est√° visible\n      if (sessionExpiringRef.current) return;\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      setCountdown(COUNTDOWN_SECONDS);\n      console.log('üîÑ Reset timers de inactividad', new Date().toLocaleTimeString());\n\n      // Timer para mostrar aviso\n      inactivityTimerRef.current = setTimeout(() => {\n        console.log('‚è≥ Mostrando aviso de inactividad');\n        setSessionExpiring(true);\n        // No iniciar conteo visual para evitar re-renders constantes\n      }, INACTIVITY_WARNING);\n\n      // Timer para logout autom√°tico\n      totalSessionTimerRef.current = setTimeout(() => {\n        console.log('üö™ Timeout alcanzado, cerrando sesi√≥n');\n        handleAutoLogout();\n      }, INACTIVITY_TIMEOUT);\n    };\n    const startCountdown = () => {\n      // Eliminado conteo visual para evitar re-render de toda la app\n      // El cierre autom√°tico lo maneja totalSessionTimerRef\n      clearInterval(countdownRef.current);\n    };\n    const handleAutoLogout = async () => {\n      console.log('üö™ Logout autom√°tico por inactividad');\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n    };\n    const handleUserActivity = () => {\n      // Si el modal est√° visible, NO resetear\n      if (sessionExpiringRef.current) {\n        console.log('‚ö†Ô∏è Modal visible, ignorando actividad');\n        return;\n      }\n      // Throttle de eventos de actividad para evitar r√°fagas (mousemove/scroll)\n      const now = Date.now();\n      if (now - lastActivityTimeRef.current < 1000) return;\n      lastActivityTimeRef.current = now;\n      resetInactivityTimers();\n    };\n\n    // Suscribir eventos de actividad\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    window.addEventListener('scroll', handleUserActivity);\n    window.addEventListener('click', handleUserActivity);\n\n    // Inicializar timers\n    resetInactivityTimers();\n    return () => {\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('scroll', handleUserActivity);\n      window.removeEventListener('click', handleUserActivity);\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n    };\n  }, [!!user]);\n\n  // ========================\n  // üîÅ Extender sesi√≥n (bot√≥n \"Mantener sesi√≥n\")\n  // ========================\n  const extendSession = () => {\n    console.log('‚úÖ Usuario extendi√≥ la sesi√≥n manualmente');\n\n    // Ocultar modal y resetear countdown\n    setSessionExpiring(false);\n    setCountdown(COUNTDOWN_SECONDS);\n\n    // Limpiar timers de inactividad\n    clearTimeout(inactivityTimerRef.current);\n    clearTimeout(totalSessionTimerRef.current);\n    clearInterval(countdownRef.current);\n\n    // Reiniciar timers desde cero\n    console.log('üîÑ Reiniciando timers de inactividad');\n    inactivityTimerRef.current = setTimeout(() => {\n      console.log('‚è≥ Mostrando aviso de inactividad');\n      setSessionExpiring(true);\n      // Sin conteo visual\n    }, INACTIVITY_WARNING);\n    totalSessionTimerRef.current = setTimeout(async () => {\n      console.log('üö™ Timeout alcanzado despu√©s de extender sesi√≥n');\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n    }, INACTIVITY_TIMEOUT);\n  };\n\n  // ========================\n  // üîê Login\n  // ========================\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Guardar tokens\n        localStorage.setItem('access_token', data.access_token);\n        localStorage.setItem('refresh_token', data.refresh_token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n\n        // Guardar tiempo de expiraci√≥n\n        const expiryTime = Date.now() + ACCESS_TOKEN_LIFETIME;\n        localStorage.setItem('token_expiry', expiryTime.toString());\n        tokenExpiryTimeRef.current = expiryTime;\n        setUser(data.user);\n\n        // Programar refresh proactivo\n        scheduleTokenRefresh();\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error en el login'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Error de conexi√≥n con el servidor'\n      };\n    }\n  };\n\n  // ========================\n  // üö™ Logout\n  // ========================\n  const logout = async () => {\n    try {\n      setSessionExpiring(false);\n\n      // Limpiar todos los timers\n      clearTimeout(refreshTimerRef.current);\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        await fetch('http://localhost:5000/api/auth/logout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error durante logout:', error);\n    } finally {\n      setUser(null);\n      localStorage.removeItem('user');\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expiry');\n      localStorage.setItem('logout_event', Date.now());\n\n      // Resetear refs\n      isRefreshingRef.current = false;\n      refreshPromiseRef.current = null;\n      tokenExpiryTimeRef.current = null;\n\n      // ProtectedRoutes en App.js detectar√° user=null y redirigir√° a /login\n    }\n  };\n\n  // ========================\n  // üîë hasPermission\n  // ========================\n  const hasPermission = permission => {\n    if (!user || !user.permissions) return false;\n    return user.permissions.includes(permission);\n  };\n\n  // ========================\n  // üåê authFetch con lock anti-race-condition\n  // ========================\n  const authFetch = async (url, options = {}) => {\n    let token = localStorage.getItem('access_token');\n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n        'Authorization': `Bearer ${token}`\n      }\n    };\n    let response = await fetch(url, config);\n\n    // Si el token expir√≥ (401), intentar refresh UNA VEZ\n    if (response.status === 401) {\n      console.log('üîÑ Token expirado, intentando refresh...');\n      const refreshed = await refreshToken();\n      if (refreshed) {\n        // Reintentar request con nuevo token\n        token = localStorage.getItem('access_token');\n        config.headers.Authorization = `Bearer ${token}`;\n        response = await fetch(url, config);\n      }\n    }\n    return response;\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      hasPermission,\n      loading,\n      authFetch,\n      sessionExpiring,\n      extendSession\n    },\n    children: [children, sessionExpiring && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-2xl shadow-lg text-center max-w-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold mb-2 text-gray-800\",\n          children: \"Sesi\\xF3n a punto de expirar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mb-4\",\n          children: \"Tu sesi\\xF3n se cerrar\\xE1 autom\\xE1ticamente por inactividad.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: extendSession,\n            className: \"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\",\n            children: \"Mantener sesi\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: logout,\n            className: \"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\",\n            children: \"Cerrar ahora\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 650,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"3ncQ74pV5lokEee5TwzlOI9taac=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","sessionExpiring","setSessionExpiring","TIEMPO_CONFIG","TOKEN_DURACION","minutos","segundos","REFRESH_ANTICIPADO","AVISO_INACTIVIDAD","LOGOUT_INACTIVIDAD","aMs","config","ACCESS_TOKEN_LIFETIME","REFRESH_BEFORE_EXPIRY","INACTIVITY_WARNING","INACTIVITY_TIMEOUT","COUNTDOWN_SECONDS","Math","floor","countdown","setCountdown","countdownRef","inactivityTimerRef","totalSessionTimerRef","sessionExpiringRef","refreshTimerRef","isRefreshingRef","refreshPromiseRef","tokenExpiryTimeRef","lastActivityTimeRef","current","initializeAuth","savedUser","localStorage","getItem","accessToken","JSON","parse","tokenExpiry","parseInt","scheduleTokenRefresh","response","fetch","method","headers","ok","refreshToken","error","console","logout","syncLogout","e","key","removeItem","window","addEventListener","removeEventListener","clearTimeout","expiryTime","now","Date","timeUntilExpiry","timeUntilRefresh","log","round","setTimeout","success","data","json","setItem","access_token","refresh_token","toString","stringify","resetInactivityTimers","clearInterval","toLocaleTimeString","handleAutoLogout","startCountdown","handleUserActivity","extendSession","login","email","password","body","token","hasPermission","permission","permissions","includes","authFetch","url","options","status","refreshed","Authorization","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Usuarios/FRANCO/Desktop/parroquav3/frontend/src/contexts/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Cargar usuario desde localStorage al inicio y verificar token\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         // Verificar si el token es v√°lido\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: {\n//               'Authorization': `Bearer ${accessToken}`,\n//             },\n//           });\n\n//           if (!response.ok) {\n//             // Token inv√°lido, intentar refrescar\n//             await refreshToken();\n//           }\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//         console.log('üîê Intentando login con:', email);\n\n//         const response = await fetch('http://localhost:5000/api/auth/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password }),\n//         });\n\n//         const data = await response.json();\n//         console.log('üì¶ Respuesta del login:', data);\n\n//         if (response.ok) {\n//             console.log('‚úÖ Login exitoso. Tokens recibidos:');\n//             console.log('Access Token:', data.access_token ? 'S√ç' : 'NO');\n//             console.log('Refresh Token:', data.refresh_token ? 'S√ç' : 'NO');\n//             console.log('User:', data.user ? 'S√ç' : 'NO');\n\n//             // Guardar en localStorage\n//             localStorage.setItem('access_token', data.access_token);\n//             localStorage.setItem('refresh_token', data.refresh_token);\n//             localStorage.setItem('user', JSON.stringify(data.user));\n\n//             console.log('üíæ Token guardado en localStorage:', \n//                 localStorage.getItem('access_token') ? 'S√ç' : 'NO');\n\n//             setUser(data.user);\n//             return { success: true, user: data.user };\n//         } else {\n//             console.log('‚ùå Error en login:', data.error);\n//             return { success: false, error: data.error || 'Error en el login' };\n//         }\n//     } catch (error) {\n//         console.log('üåê Error de conexi√≥n:', error);\n//         return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${token}`,\n//           },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': `Bearer ${refreshToken}`,\n//         },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         // üîß Si se genera un nuevo refresh token, reemplazar el anterior\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   // Funci√≥n para hacer requests autenticadas con refresh autom√°tico\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     // Si el token expir√≥, intentar refrescar y reenviar la request\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ \n//       user, \n//       login, \n//       logout, \n//       hasPermission, \n//       loading,\n//       authFetch \n//     }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [sessionExpiring, setSessionExpiring] = useState(false);\n\n  // ‚öôÔ∏è CONFIGURACI√ìN DE TIEMPOS (m√°s legible)\n  // Formato: { minutos: X, segundos: Y }\n  const TIEMPO_CONFIG = {\n  TOKEN_DURACION: { minutos: 1, segundos: 0 },      // Igual que backend\n  REFRESH_ANTICIPADO: { minutos: 0, segundos: 10 }, // 10s antes de expirar\n  AVISO_INACTIVIDAD: { minutos: 0, segundos: 45 },  // Aviso a los 45s\n  LOGOUT_INACTIVIDAD: { minutos: 1, segundos: 0 }   // Logout a 1 min\n};\n\n  // üîß Funci√≥n helper para convertir a milisegundos\n  const aMs = (config) => (config.minutos * 60 + config.segundos) * 1000;\n\n  // Constantes calculadas (NO MODIFICAR)\n  const ACCESS_TOKEN_LIFETIME = aMs(TIEMPO_CONFIG.TOKEN_DURACION);\n  const REFRESH_BEFORE_EXPIRY = aMs(TIEMPO_CONFIG.REFRESH_ANTICIPADO);\n  const INACTIVITY_WARNING = aMs(TIEMPO_CONFIG.AVISO_INACTIVIDAD);\n  const INACTIVITY_TIMEOUT = aMs(TIEMPO_CONFIG.LOGOUT_INACTIVIDAD);\n  const COUNTDOWN_SECONDS = Math.floor((INACTIVITY_TIMEOUT - INACTIVITY_WARNING) / 1000);\n\n  const [countdown, setCountdown] = useState(COUNTDOWN_SECONDS);\n\n  // üîí REFS para control de estado y prevenci√≥n de race conditions\n  const countdownRef = useRef(null);\n  const inactivityTimerRef = useRef(null);\n  const totalSessionTimerRef = useRef(null);\n  const sessionExpiringRef = useRef(sessionExpiring);\n  const refreshTimerRef = useRef(null);\n  const isRefreshingRef = useRef(false);\n  const refreshPromiseRef = useRef(null);\n  const tokenExpiryTimeRef = useRef(null);\n  const lastActivityTimeRef = useRef(0);\n\n  useEffect(() => {\n    sessionExpiringRef.current = sessionExpiring;\n  }, [sessionExpiring]);\n\n  // ========================\n  // üü¢ Inicializaci√≥n de sesi√≥n\n  // ========================\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const savedUser = localStorage.getItem('user');\n      const accessToken = localStorage.getItem('access_token');\n\n      if (savedUser && accessToken) {\n        setUser(JSON.parse(savedUser));\n        \n        // Establecer tiempo de expiraci√≥n del token\n        const tokenExpiry = localStorage.getItem('token_expiry');\n        if (tokenExpiry) {\n          tokenExpiryTimeRef.current = parseInt(tokenExpiry);\n          scheduleTokenRefresh();\n        }\n\n        try {\n          const response = await fetch('http://localhost:5000/api/users/profile', {\n            method: 'GET',\n            headers: { 'Authorization': `Bearer ${accessToken}` },\n          });\n          \n          if (!response.ok) {\n            // Token inv√°lido, intentar refresh\n            await refreshToken();\n          }\n        } catch (error) {\n          console.error('Error verificando token:', error);\n          await logout();\n        }\n      }\n      setLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  // ========================\n  // üîÅ Sincronizar logout entre pesta√±as\n  // ========================\n  useEffect(() => {\n    const syncLogout = (e) => {\n      if (e.key === 'logout_event') {\n        setUser(null);\n        localStorage.removeItem('user');\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('token_expiry');\n        // NO usar navigate aqu√≠, ProtectedRoutes lo manejar√°\n      }\n    };\n    window.addEventListener('storage', syncLogout);\n    return () => window.removeEventListener('storage', syncLogout);\n  }, []);\n\n  // ========================\n  // üîÑ REFRESH PROACTIVO (antes de que expire)\n  // ========================\n  const scheduleTokenRefresh = () => {\n    // Limpiar timer anterior\n    if (refreshTimerRef.current) {\n      clearTimeout(refreshTimerRef.current);\n    }\n\n    const expiryTime = tokenExpiryTimeRef.current;\n    if (!expiryTime) return;\n\n    const now = Date.now();\n    const timeUntilExpiry = expiryTime - now;\n    const timeUntilRefresh = timeUntilExpiry - REFRESH_BEFORE_EXPIRY;\n\n    console.log(`üïê Token expira en: ${Math.round(timeUntilExpiry / 1000)}s`);\n    console.log(`üîÑ Programando refresh en: ${Math.round(timeUntilRefresh / 1000)}s`);\n\n    // Solo programar refresh si tiene sentido (token a√∫n v√°lido y no cerca de expirar)\n    if (timeUntilRefresh > 0 && timeUntilExpiry > 0) {\n      refreshTimerRef.current = setTimeout(async () => {\n        console.log('üîÑ Ejecutando refresh proactivo...');\n        const success = await refreshToken();\n        \n        // Si el refresh falla, no programar otro (evita loop infinito)\n        if (!success) {\n          console.log('‚ùå Refresh fall√≥, no se programa otro');\n        }\n      }, timeUntilRefresh);\n    } else if (timeUntilExpiry > 0 && timeUntilExpiry <= REFRESH_BEFORE_EXPIRY) {\n      // Token est√° muy cerca de expirar, refresh inmediato\n      console.log('‚ö†Ô∏è Token muy cerca de expirar, refresh inmediato');\n      refreshToken();\n    } else {\n      // Token ya expir√≥\n      console.log('‚ö†Ô∏è Token ya expir√≥');\n    }\n  };\n\n  // ========================\n  // üîí REFRESH CON LOCK (evita m√∫ltiples llamadas simult√°neas)\n  // ========================\n  const refreshToken = async () => {\n    // Si ya hay un refresh en progreso, esperar a que termine\n    if (isRefreshingRef.current && refreshPromiseRef.current) {\n      console.log('‚è≥ Refresh en progreso, esperando...');\n      return refreshPromiseRef.current;\n    }\n\n    // Marcar que estamos haciendo refresh\n    isRefreshingRef.current = true;\n    \n    refreshPromiseRef.current = (async () => {\n      try {\n        const refreshToken = localStorage.getItem('refresh_token');\n        if (!refreshToken) {\n          console.log('‚ùå No hay refresh token');\n          await logout();\n          return false;\n        }\n\n        console.log('üîÑ Ejecutando refresh token...');\n        const response = await fetch('http://localhost:5000/api/auth/refresh', {\n          method: 'POST',\n          headers: { 'Authorization': `Bearer ${refreshToken}` },\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n          console.log('‚úÖ Refresh exitoso');\n          \n          // Guardar nuevos tokens\n          localStorage.setItem('access_token', data.access_token);\n          \n          if (data.refresh_token) {\n            localStorage.setItem('refresh_token', data.refresh_token);\n          }\n          \n          // Calcular y guardar tiempo de expiraci√≥n\n          const expiryTime = Date.now() + ACCESS_TOKEN_LIFETIME;\n          localStorage.setItem('token_expiry', expiryTime.toString());\n          tokenExpiryTimeRef.current = expiryTime;\n          \n          if (data.user) {\n            // Evitar reiniciar timers por cambios de referencia del usuario durante refresh\n            if (!user) {\n              setUser(data.user);\n              localStorage.setItem('user', JSON.stringify(data.user));\n            }\n          }\n\n          // ‚úÖ CR√çTICO: Solo programar pr√≥ximo refresh si NO es un refresh proactivo repetitivo\n          // El pr√≥ximo refresh se programar√° solo cuando sea necesario (por authFetch o nuevo login)\n          console.log('‚úÖ Token renovado, NO se programa refresh autom√°tico adicional');\n          \n          return true;\n        } else {\n          console.log('‚ùå Refresh fall√≥:', data.error);\n          await logout();\n          return false;\n        }\n      } catch (error) {\n        console.error('‚ùå Error en refresh:', error);\n        await logout();\n        return false;\n      } finally {\n        // Liberar el lock\n        isRefreshingRef.current = false;\n        refreshPromiseRef.current = null;\n      }\n    })();\n\n    return refreshPromiseRef.current;\n  };\n\n  // ========================\n  // ‚è∞ Control de inactividad (SEPARADO del refresh de token)\n  // ========================\n  useEffect(() => {\n    if (!user) return;\n\n    const resetInactivityTimers = () => {\n      // NO resetear si el modal ya est√° visible\n      if (sessionExpiringRef.current) return;\n\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      setCountdown(COUNTDOWN_SECONDS);\n\n      console.log('üîÑ Reset timers de inactividad', new Date().toLocaleTimeString());\n\n      // Timer para mostrar aviso\n      inactivityTimerRef.current = setTimeout(() => {\n        console.log('‚è≥ Mostrando aviso de inactividad');\n        setSessionExpiring(true);\n        // No iniciar conteo visual para evitar re-renders constantes\n      }, INACTIVITY_WARNING);\n\n      // Timer para logout autom√°tico\n      totalSessionTimerRef.current = setTimeout(() => {\n        console.log('üö™ Timeout alcanzado, cerrando sesi√≥n');\n        handleAutoLogout();\n      }, INACTIVITY_TIMEOUT);\n    };\n\n    const startCountdown = () => {\n      // Eliminado conteo visual para evitar re-render de toda la app\n      // El cierre autom√°tico lo maneja totalSessionTimerRef\n      clearInterval(countdownRef.current);\n    };\n\n    const handleAutoLogout = async () => {\n      console.log('üö™ Logout autom√°tico por inactividad');\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n    };\n\n    const handleUserActivity = () => {\n      // Si el modal est√° visible, NO resetear\n      if (sessionExpiringRef.current) {\n        console.log('‚ö†Ô∏è Modal visible, ignorando actividad');\n        return;\n      }\n      // Throttle de eventos de actividad para evitar r√°fagas (mousemove/scroll)\n      const now = Date.now();\n      if (now - lastActivityTimeRef.current < 1000) return;\n      lastActivityTimeRef.current = now;\n      resetInactivityTimers();\n    };\n\n    // Suscribir eventos de actividad\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    window.addEventListener('scroll', handleUserActivity);\n    window.addEventListener('click', handleUserActivity);\n\n    // Inicializar timers\n    resetInactivityTimers();\n\n    return () => {\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('scroll', handleUserActivity);\n      window.removeEventListener('click', handleUserActivity);\n\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n    };\n  }, [!!user]);\n\n  // ========================\n  // üîÅ Extender sesi√≥n (bot√≥n \"Mantener sesi√≥n\")\n  // ========================\n  const extendSession = () => {\n    console.log('‚úÖ Usuario extendi√≥ la sesi√≥n manualmente');\n    \n    // Ocultar modal y resetear countdown\n    setSessionExpiring(false);\n    setCountdown(COUNTDOWN_SECONDS);\n    \n    // Limpiar timers de inactividad\n    clearTimeout(inactivityTimerRef.current);\n    clearTimeout(totalSessionTimerRef.current);\n    clearInterval(countdownRef.current);\n\n    // Reiniciar timers desde cero\n    console.log('üîÑ Reiniciando timers de inactividad');\n    \n    inactivityTimerRef.current = setTimeout(() => {\n      console.log('‚è≥ Mostrando aviso de inactividad');\n      setSessionExpiring(true);\n      // Sin conteo visual\n    }, INACTIVITY_WARNING);\n\n    totalSessionTimerRef.current = setTimeout(async () => {\n      console.log('üö™ Timeout alcanzado despu√©s de extender sesi√≥n');\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n    }, INACTIVITY_TIMEOUT);\n  };\n\n  // ========================\n  // üîê Login\n  // ========================\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        // Guardar tokens\n        localStorage.setItem('access_token', data.access_token);\n        localStorage.setItem('refresh_token', data.refresh_token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        \n        // Guardar tiempo de expiraci√≥n\n        const expiryTime = Date.now() + ACCESS_TOKEN_LIFETIME;\n        localStorage.setItem('token_expiry', expiryTime.toString());\n        tokenExpiryTimeRef.current = expiryTime;\n        \n        setUser(data.user);\n        \n        // Programar refresh proactivo\n        scheduleTokenRefresh();\n        \n        return { success: true, user: data.user };\n      } else {\n        return { success: false, error: data.error || 'Error en el login' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Error de conexi√≥n con el servidor' };\n    }\n  };\n\n  // ========================\n  // üö™ Logout\n  // ========================\n  const logout = async () => {\n    try {\n      setSessionExpiring(false);\n      \n      // Limpiar todos los timers\n      clearTimeout(refreshTimerRef.current);\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        await fetch('http://localhost:5000/api/auth/logout', {\n          method: 'POST',\n          headers: { 'Authorization': `Bearer ${token}` },\n        });\n      }\n    } catch (error) {\n      console.error('Error durante logout:', error);\n    } finally {\n      setUser(null);\n      localStorage.removeItem('user');\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expiry');\n      localStorage.setItem('logout_event', Date.now());\n      \n      // Resetear refs\n      isRefreshingRef.current = false;\n      refreshPromiseRef.current = null;\n      tokenExpiryTimeRef.current = null;\n      \n      // ProtectedRoutes en App.js detectar√° user=null y redirigir√° a /login\n    }\n  };\n\n  // ========================\n  // üîë hasPermission\n  // ========================\n  const hasPermission = (permission) => {\n    if (!user || !user.permissions) return false;\n    return user.permissions.includes(permission);\n  };\n\n  // ========================\n  // üåê authFetch con lock anti-race-condition\n  // ========================\n  const authFetch = async (url, options = {}) => {\n    let token = localStorage.getItem('access_token');\n\n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n      },\n    };\n\n    let response = await fetch(url, config);\n\n    // Si el token expir√≥ (401), intentar refresh UNA VEZ\n    if (response.status === 401) {\n      console.log('üîÑ Token expirado, intentando refresh...');\n      \n      const refreshed = await refreshToken();\n      \n      if (refreshed) {\n        // Reintentar request con nuevo token\n        token = localStorage.getItem('access_token');\n        config.headers.Authorization = `Bearer ${token}`;\n        response = await fetch(url, config);\n      }\n    }\n\n    return response;\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      login,\n      logout,\n      hasPermission,\n      loading,\n      authFetch,\n      sessionExpiring,\n      extendSession\n    }}>\n      {children}\n\n      {/* üîî Modal de inactividad (sin conteo visual para evitar re-render global) */}\n      {sessionExpiring && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\">\n          <div className=\"bg-white p-6 rounded-2xl shadow-lg text-center max-w-sm\">\n            <h2 className=\"text-lg font-semibold mb-2 text-gray-800\">\n              Sesi√≥n a punto de expirar\n            </h2>\n            <p className=\"text-gray-600 mb-4\">\n              Tu sesi√≥n se cerrar√° autom√°ticamente por inactividad.\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <button\n                onClick={extendSession}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n              >\n                Mantener sesi√≥n\n              </button>\n              <button\n                onClick={logout}\n                className=\"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\"\n              >\n                Cerrar ahora\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtF,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}