{"ast":null,"code":"var _jsxFileName = \"D:\\\\Usuarios\\\\FRANCO\\\\Desktop\\\\proyectoparroquia\\\\parroquia-frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Cargar usuario desde localStorage al inicio y verificar token\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         // Verificar si el token es v√°lido\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: {\n//               'Authorization': `Bearer ${accessToken}`,\n//             },\n//           });\n\n//           if (!response.ok) {\n//             // Token inv√°lido, intentar refrescar\n//             await refreshToken();\n//           }\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//         console.log('üîê Intentando login con:', email);\n\n//         const response = await fetch('http://localhost:5000/api/auth/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password }),\n//         });\n\n//         const data = await response.json();\n//         console.log('üì¶ Respuesta del login:', data);\n\n//         if (response.ok) {\n//             console.log('‚úÖ Login exitoso. Tokens recibidos:');\n//             console.log('Access Token:', data.access_token ? 'S√ç' : 'NO');\n//             console.log('Refresh Token:', data.refresh_token ? 'S√ç' : 'NO');\n//             console.log('User:', data.user ? 'S√ç' : 'NO');\n\n//             // Guardar en localStorage\n//             localStorage.setItem('access_token', data.access_token);\n//             localStorage.setItem('refresh_token', data.refresh_token);\n//             localStorage.setItem('user', JSON.stringify(data.user));\n\n//             console.log('üíæ Token guardado en localStorage:', \n//                 localStorage.getItem('access_token') ? 'S√ç' : 'NO');\n\n//             setUser(data.user);\n//             return { success: true, user: data.user };\n//         } else {\n//             console.log('‚ùå Error en login:', data.error);\n//             return { success: false, error: data.error || 'Error en el login' };\n//         }\n//     } catch (error) {\n//         console.log('üåê Error de conexi√≥n:', error);\n//         return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${token}`,\n//           },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': `Bearer ${refreshToken}`,\n//         },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         // üîß Si se genera un nuevo refresh token, reemplazar el anterior\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   // Funci√≥n para hacer requests autenticadas con refresh autom√°tico\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     // Si el token expir√≥, intentar refrescar y reenviar la request\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ \n//       user, \n//       login, \n//       logout, \n//       hasPermission, \n//       loading,\n//       authFetch \n//     }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [sessionExpiring, setSessionExpiring] = useState(false);\n\n  //const [countdown, setCountdown] = useState(180); // 3 minutos\n  //const [countdown, setCountdown] = useState(10); // 10 segundos (solo prueba)\n  //\n\n  // ‚öôÔ∏è Despu√©s de 7 minutos ‚Üí mostrar aviso de expiraci√≥n\n  //inactivityTimerRef.current = setTimeout(() => {\n  //  setSessionExpiring(true);\n  //  startCountdown();\n  //}, 7 * 60 * 1000);\n  // ‚öôÔ∏è Despu√©s de 10 minutos ‚Üí cerrar sesi√≥n autom√°ticamente\n  //totalSessionTimerRef.current = setTimeout(() => {\n  //  handleAutoLogout();\n  //}, 10 * 60 * 1000);\n\n  // ‚öôÔ∏è Despu√©s de 20 segundos ‚Üí mostrar aviso de expiraci√≥n (solo pruebas)\n  //inactivityTimerRef.current = setTimeout(() => {\n  //  setSessionExpiring(true);\n  //  startCountdown();\n  //}, 20 * 1000);\n\n  // ‚öôÔ∏è Despu√©s de 30 segundos ‚Üí cerrar sesi√≥n autom√°ticamente (solo pruebas)\n  //totalSessionTimerRef.current = setTimeout(() => {\n  //  handleAutoLogout();\n  //}, 30 * 1000)\n\n  // ‚öôÔ∏è Ajusta aqu√≠ los tiempos (para prueba est√°n en 20s / 30s)\n  const WARNING_DELAY = 20 * 1000; // mostrar aviso (ms) -> prueba: 20s\n  const TOTAL_DELAY = 30 * 1000; // cerrar sesi√≥n por inactividad (ms) -> prueba: 30s\n  const COUNTDOWN_SECONDS = Math.floor((TOTAL_DELAY - WARNING_DELAY) / 1000);\n  const [countdown, setCountdown] = useState(COUNTDOWN_SECONDS); // calculado desde constantes\n\n  const countdownRef = useRef(null);\n  const inactivityTimerRef = useRef(null);\n  const totalSessionTimerRef = useRef(null);\n  const sessionExpiringRef = useRef(sessionExpiring);\n  useEffect(() => {\n    sessionExpiringRef.current = sessionExpiring;\n  }, [sessionExpiring]);\n\n  // ========================\n  // üü¢ Inicializaci√≥n de sesi√≥n\n  // ========================\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const savedUser = localStorage.getItem('user');\n      const accessToken = localStorage.getItem('access_token');\n      if (savedUser && accessToken) {\n        setUser(JSON.parse(savedUser));\n        try {\n          const response = await fetch('http://localhost:5000/api/users/profile', {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${accessToken}`\n            }\n          });\n          if (!response.ok) await refreshToken();\n        } catch (error) {\n          console.error('Error verificando token:', error);\n          await logout();\n        }\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n\n  // ========================\n  // üîÅ Sincronizar logout entre pesta√±as\n  // ========================\n  useEffect(() => {\n    const syncLogout = e => {\n      if (e.key === 'logout_event') {\n        setUser(null);\n        localStorage.removeItem('user');\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n      }\n    };\n    window.addEventListener('storage', syncLogout);\n    return () => window.removeEventListener('storage', syncLogout);\n  }, []);\n\n  // ========================\n  // ‚è∞ Control de inactividad\n  // ========================\n  useEffect(() => {\n    if (!user) return;\n\n    // resetInactivityTimers definido dentro del effect (se usar√° por el handler)\n    const resetInactivityTimers = () => {\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      setCountdown(COUNTDOWN_SECONDS);\n      console.log('üîÑ Reset timers', new Date().toLocaleTimeString());\n\n      // ‚öôÔ∏è Despu√©s del WARNING_DELAY ‚Üí mostrar aviso de expiraci√≥n\n      inactivityTimerRef.current = setTimeout(() => {\n        console.log(\"‚è≥ Mostrando aviso de expiraci√≥n\", new Date().toLocaleTimeString());\n        if (!sessionExpiringRef.current) {\n          setSessionExpiring(true);\n        }\n        startCountdown();\n      }, WARNING_DELAY);\n\n      // ‚öôÔ∏è Despu√©s del TOTAL_DELAY ‚Üí cerrar sesi√≥n autom√°ticamente\n      totalSessionTimerRef.current = setTimeout(() => {\n        handleAutoLogout();\n      }, TOTAL_DELAY);\n    };\n    const startCountdown = () => {\n      // establecer el tiempo inicial del countdown en segundos calculado\n      let remaining = COUNTDOWN_SECONDS;\n      console.log('‚è≥ Mostrando aviso de expiraci√≥n', new Date().toLocaleTimeString());\n      setCountdown(remaining);\n      clearInterval(countdownRef.current);\n      countdownRef.current = setInterval(() => {\n        remaining -= 1;\n        setCountdown(remaining);\n        if (remaining <= 0) {\n          clearInterval(countdownRef.current);\n        }\n      }, 1000);\n    };\n    const handleAutoLogout = async () => {\n      console.log('üö™ Auto logout triggered', new Date().toLocaleTimeString());\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      // Llamamos al logout real (env√≠a request al backend y limpia localStorage)\n      await logout();\n      // Opcional: puedes agregar un console.log para traza\n      console.log('‚ö†Ô∏è Sesi√≥n cerrada autom√°ticamente por inactividad');\n    };\n\n    // Handler de actividad: si ya est√° apareciendo el aviso, NO reiniciamos timers\n    const handleUserActivity = () => {\n      console.log('üñ±Ô∏è Actividad detectada, modal visible?', sessionExpiringRef.current);\n      if (sessionExpiringRef.current) return; // ‚úÖ evita reset mientras modal visible\n      resetInactivityTimers();\n    };\n\n    // Suscribimos eventos de actividad\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    window.addEventListener('scroll', handleUserActivity);\n    window.addEventListener('click', handleUserActivity);\n\n    // Inicializamos temporizadores por primera vez\n    resetInactivityTimers();\n\n    // Limpieza: remover exactamente las mismas referencias de handler\n    return () => {\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('scroll', handleUserActivity);\n      window.removeEventListener('click', handleUserActivity);\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n    };\n    // ‚úÖ Importante: re-ejecutar este effect cuando 'user' o 'sessionExpiring' cambien\n  }, [user, sessionExpiring]); // <--- a√±adimos sessionExpiring para que la closure vea su valor actualizado\n\n  // ========================\n  // üîÅ Extender sesi√≥n (invocado por el bot√≥n \"Mantener sesi√≥n\")\n  // ========================\n  const extendSession = () => {\n    // limpiamos timers existentes\n    clearTimeout(inactivityTimerRef.current);\n    clearTimeout(totalSessionTimerRef.current);\n    clearInterval(countdownRef.current);\n\n    // ocultamos modal y reiniciamos el contador\n    setSessionExpiring(false);\n    setCountdown(COUNTDOWN_SECONDS);\n\n    // reiniciamos manualmente los temporizadores (no generamos eventos falsos)\n    inactivityTimerRef.current = setTimeout(() => {\n      setSessionExpiring(true);\n      // arrancar countdown localmente\n      let remaining = COUNTDOWN_SECONDS;\n      setCountdown(remaining);\n      clearInterval(countdownRef.current);\n      countdownRef.current = setInterval(() => {\n        remaining -= 1;\n        setCountdown(remaining);\n        if (remaining <= 0) clearInterval(countdownRef.current);\n      }, 1000);\n    }, WARNING_DELAY);\n    totalSessionTimerRef.current = setTimeout(async () => {\n      // si llega aqu√≠, finaliza sesi√≥n\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n      console.log('‚ö†Ô∏è Sesi√≥n cerrada autom√°ticamente por inactividad (desde extendSession timers)');\n    }, TOTAL_DELAY);\n  };\n\n  // ========================\n  // üîê Funciones de autenticaci√≥n (sin cambios)\n  // ========================\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('access_token', data.access_token);\n        localStorage.setItem('refresh_token', data.refresh_token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        setUser(data.user);\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error en el login'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Error de conexi√≥n con el servidor'\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        await fetch('http://localhost:5000/api/auth/logout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error durante logout:', error);\n    } finally {\n      // ocultar modal si est√° visible\n      setSessionExpiring(false);\n      setUser(null);\n      localStorage.removeItem('user');\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.setItem('logout_event', Date.now()); // sincroniza otras pesta√±as\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (!refreshToken) {\n        await logout();\n        return false;\n      }\n      const response = await fetch('http://localhost:5000/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${refreshToken}`\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('access_token', data.access_token);\n        if (data.refresh_token) {\n          localStorage.setItem('refresh_token', data.refresh_token);\n        }\n        if (data.user) {\n          setUser(data.user);\n          localStorage.setItem('user', JSON.stringify(data.user));\n        }\n        return true;\n      } else {\n        await logout();\n        return false;\n      }\n    } catch (error) {\n      console.error('Error refrescando token:', error);\n      await logout();\n      return false;\n    }\n  };\n  const hasPermission = permission => {\n    if (!user || !user.permissions) return false;\n    return user.permissions.includes(permission);\n  };\n  const authFetch = async (url, options = {}) => {\n    let token = localStorage.getItem('access_token');\n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n        'Authorization': `Bearer ${token}`\n      }\n    };\n    let response = await fetch(url, config);\n    if (response.status === 401) {\n      const refreshed = await refreshToken();\n      if (refreshed) {\n        token = localStorage.getItem('access_token');\n        config.headers.Authorization = `Bearer ${token}`;\n        response = await fetch(url, config);\n      }\n    }\n    return response;\n  };\n\n  // ========================\n  // Render y modal\n  // ========================\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      hasPermission,\n      loading,\n      authFetch,\n      sessionExpiring,\n      countdown,\n      extendSession\n    },\n    children: [children, sessionExpiring && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-2xl shadow-lg text-center max-w-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold mb-2 text-gray-800\",\n          children: \"Sesi\\xF3n a punto de expirar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mb-4\",\n          children: [\"Tu sesi\\xF3n se cerrar\\xE1 autom\\xE1ticamente en \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: [countdown, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 55\n          }, this), \" por inactividad.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: extendSession,\n            className: \"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\",\n            children: \"Mantener sesi\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: logout,\n            className: \"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\",\n            children: \"Cerrar ahora\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 536,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"I6p7gHxCXI/DEHXDGYZCAuJJ/Qk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","sessionExpiring","setSessionExpiring","WARNING_DELAY","TOTAL_DELAY","COUNTDOWN_SECONDS","Math","floor","countdown","setCountdown","countdownRef","inactivityTimerRef","totalSessionTimerRef","sessionExpiringRef","current","initializeAuth","savedUser","localStorage","getItem","accessToken","JSON","parse","response","fetch","method","headers","ok","refreshToken","error","console","logout","syncLogout","e","key","removeItem","window","addEventListener","removeEventListener","resetInactivityTimers","clearTimeout","clearInterval","log","Date","toLocaleTimeString","setTimeout","startCountdown","handleAutoLogout","remaining","setInterval","handleUserActivity","extendSession","login","email","password","body","stringify","data","json","setItem","access_token","refresh_token","success","token","now","hasPermission","permission","permissions","includes","authFetch","url","options","config","status","refreshed","Authorization","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Usuarios/FRANCO/Desktop/proyectoparroquia/parroquia-frontend/src/contexts/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Cargar usuario desde localStorage al inicio y verificar token\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         // Verificar si el token es v√°lido\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: {\n//               'Authorization': `Bearer ${accessToken}`,\n//             },\n//           });\n\n//           if (!response.ok) {\n//             // Token inv√°lido, intentar refrescar\n//             await refreshToken();\n//           }\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//         console.log('üîê Intentando login con:', email);\n\n//         const response = await fetch('http://localhost:5000/api/auth/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password }),\n//         });\n\n//         const data = await response.json();\n//         console.log('üì¶ Respuesta del login:', data);\n\n//         if (response.ok) {\n//             console.log('‚úÖ Login exitoso. Tokens recibidos:');\n//             console.log('Access Token:', data.access_token ? 'S√ç' : 'NO');\n//             console.log('Refresh Token:', data.refresh_token ? 'S√ç' : 'NO');\n//             console.log('User:', data.user ? 'S√ç' : 'NO');\n\n//             // Guardar en localStorage\n//             localStorage.setItem('access_token', data.access_token);\n//             localStorage.setItem('refresh_token', data.refresh_token);\n//             localStorage.setItem('user', JSON.stringify(data.user));\n\n//             console.log('üíæ Token guardado en localStorage:', \n//                 localStorage.getItem('access_token') ? 'S√ç' : 'NO');\n\n//             setUser(data.user);\n//             return { success: true, user: data.user };\n//         } else {\n//             console.log('‚ùå Error en login:', data.error);\n//             return { success: false, error: data.error || 'Error en el login' };\n//         }\n//     } catch (error) {\n//         console.log('üåê Error de conexi√≥n:', error);\n//         return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${token}`,\n//           },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': `Bearer ${refreshToken}`,\n//         },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         // üîß Si se genera un nuevo refresh token, reemplazar el anterior\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   // Funci√≥n para hacer requests autenticadas con refresh autom√°tico\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     // Si el token expir√≥, intentar refrescar y reenviar la request\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ \n//       user, \n//       login, \n//       logout, \n//       hasPermission, \n//       loading,\n//       authFetch \n//     }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [sessionExpiring, setSessionExpiring] = useState(false);\n  \n    //const [countdown, setCountdown] = useState(180); // 3 minutos\n  //const [countdown, setCountdown] = useState(10); // 10 segundos (solo prueba)\n  //\n\n  // ‚öôÔ∏è Despu√©s de 7 minutos ‚Üí mostrar aviso de expiraci√≥n\n  //inactivityTimerRef.current = setTimeout(() => {\n  //  setSessionExpiring(true);\n  //  startCountdown();\n  //}, 7 * 60 * 1000);\n  // ‚öôÔ∏è Despu√©s de 10 minutos ‚Üí cerrar sesi√≥n autom√°ticamente\n  //totalSessionTimerRef.current = setTimeout(() => {\n  //  handleAutoLogout();\n  //}, 10 * 60 * 1000);\n\n  // ‚öôÔ∏è Despu√©s de 20 segundos ‚Üí mostrar aviso de expiraci√≥n (solo pruebas)\n  //inactivityTimerRef.current = setTimeout(() => {\n  //  setSessionExpiring(true);\n  //  startCountdown();\n  //}, 20 * 1000);\n\n  // ‚öôÔ∏è Despu√©s de 30 segundos ‚Üí cerrar sesi√≥n autom√°ticamente (solo pruebas)\n  //totalSessionTimerRef.current = setTimeout(() => {\n  //  handleAutoLogout();\n  //}, 30 * 1000)\n\n  // ‚öôÔ∏è Ajusta aqu√≠ los tiempos (para prueba est√°n en 20s / 30s)\n  const WARNING_DELAY = 20 * 1000; // mostrar aviso (ms) -> prueba: 20s\n  const TOTAL_DELAY = 30 * 1000;   // cerrar sesi√≥n por inactividad (ms) -> prueba: 30s\n  const COUNTDOWN_SECONDS = Math.floor((TOTAL_DELAY - WARNING_DELAY) / 1000);\n\n  const [countdown, setCountdown] = useState(COUNTDOWN_SECONDS); // calculado desde constantes\n\n  const countdownRef = useRef(null);\n  const inactivityTimerRef = useRef(null);\n  const totalSessionTimerRef = useRef(null);\n  const sessionExpiringRef = useRef(sessionExpiring);\n  useEffect(() => { sessionExpiringRef.current = sessionExpiring; }, [sessionExpiring]);\n\n  // ========================\n  // üü¢ Inicializaci√≥n de sesi√≥n\n  // ========================\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const savedUser = localStorage.getItem('user');\n      const accessToken = localStorage.getItem('access_token');\n\n      if (savedUser && accessToken) {\n        setUser(JSON.parse(savedUser));\n\n        try {\n          const response = await fetch('http://localhost:5000/api/users/profile', {\n            method: 'GET',\n            headers: { 'Authorization': `Bearer ${accessToken}` },\n          });\n          if (!response.ok) await refreshToken();\n        } catch (error) {\n          console.error('Error verificando token:', error);\n          await logout();\n        }\n      }\n      setLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  // ========================\n  // üîÅ Sincronizar logout entre pesta√±as\n  // ========================\n  useEffect(() => {\n    const syncLogout = (e) => {\n      if (e.key === 'logout_event') {\n        setUser(null);\n        localStorage.removeItem('user');\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n      }\n    };\n    window.addEventListener('storage', syncLogout);\n    return () => window.removeEventListener('storage', syncLogout);\n  }, []);\n\n  // ========================\n  // ‚è∞ Control de inactividad\n  // ========================\n  useEffect(() => {\n    if (!user) return;\n\n    // resetInactivityTimers definido dentro del effect (se usar√° por el handler)\n    const resetInactivityTimers = () => {\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      setCountdown(COUNTDOWN_SECONDS);\n      console.log('üîÑ Reset timers', new Date().toLocaleTimeString());\n\n      // ‚öôÔ∏è Despu√©s del WARNING_DELAY ‚Üí mostrar aviso de expiraci√≥n\n      inactivityTimerRef.current = setTimeout(() => {\n        console.log(\"‚è≥ Mostrando aviso de expiraci√≥n\", new Date().toLocaleTimeString());\n        if (!sessionExpiringRef.current) {\n          setSessionExpiring(true);\n        }\n        startCountdown();\n      }, WARNING_DELAY);\n\n      // ‚öôÔ∏è Despu√©s del TOTAL_DELAY ‚Üí cerrar sesi√≥n autom√°ticamente\n      totalSessionTimerRef.current = setTimeout(() => {\n        handleAutoLogout();\n      }, TOTAL_DELAY);\n    };\n\n    const startCountdown = () => {\n      // establecer el tiempo inicial del countdown en segundos calculado\n      let remaining = COUNTDOWN_SECONDS;\n      console.log('‚è≥ Mostrando aviso de expiraci√≥n', new Date().toLocaleTimeString());\n      setCountdown(remaining);\n      clearInterval(countdownRef.current);\n      countdownRef.current = setInterval(() => {\n        remaining -= 1;\n        setCountdown(remaining);\n        if (remaining <= 0) {\n          clearInterval(countdownRef.current);\n        }\n      }, 1000);\n    };\n\n    const handleAutoLogout = async () => {\n      console.log('üö™ Auto logout triggered', new Date().toLocaleTimeString());\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      // Llamamos al logout real (env√≠a request al backend y limpia localStorage)\n      await logout();\n      // Opcional: puedes agregar un console.log para traza\n      console.log('‚ö†Ô∏è Sesi√≥n cerrada autom√°ticamente por inactividad');\n    };\n\n    // Handler de actividad: si ya est√° apareciendo el aviso, NO reiniciamos timers\n    const handleUserActivity = () => {\n      console.log('üñ±Ô∏è Actividad detectada, modal visible?', sessionExpiringRef.current);\n\n      if (sessionExpiringRef.current) return; // ‚úÖ evita reset mientras modal visible\n      resetInactivityTimers();\n    };\n\n    // Suscribimos eventos de actividad\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    window.addEventListener('scroll', handleUserActivity);\n    window.addEventListener('click', handleUserActivity);\n\n    // Inicializamos temporizadores por primera vez\n    resetInactivityTimers();\n\n    // Limpieza: remover exactamente las mismas referencias de handler\n    return () => {\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('scroll', handleUserActivity);\n      window.removeEventListener('click', handleUserActivity);\n\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n    };\n    // ‚úÖ Importante: re-ejecutar este effect cuando 'user' o 'sessionExpiring' cambien\n  }, [user, sessionExpiring]); // <--- a√±adimos sessionExpiring para que la closure vea su valor actualizado\n\n  // ========================\n  // üîÅ Extender sesi√≥n (invocado por el bot√≥n \"Mantener sesi√≥n\")\n  // ========================\n  const extendSession = () => {\n    // limpiamos timers existentes\n    clearTimeout(inactivityTimerRef.current);\n    clearTimeout(totalSessionTimerRef.current);\n    clearInterval(countdownRef.current);\n\n    // ocultamos modal y reiniciamos el contador\n    setSessionExpiring(false);\n    setCountdown(COUNTDOWN_SECONDS);\n\n    // reiniciamos manualmente los temporizadores (no generamos eventos falsos)\n    inactivityTimerRef.current = setTimeout(() => {\n      setSessionExpiring(true);\n      // arrancar countdown localmente\n      let remaining = COUNTDOWN_SECONDS;\n      setCountdown(remaining);\n      clearInterval(countdownRef.current);\n      countdownRef.current = setInterval(() => {\n        remaining -= 1;\n        setCountdown(remaining);\n        if (remaining <= 0) clearInterval(countdownRef.current);\n      }, 1000);\n    }, WARNING_DELAY);\n\n    totalSessionTimerRef.current = setTimeout(async () => {\n      // si llega aqu√≠, finaliza sesi√≥n\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n      console.log('‚ö†Ô∏è Sesi√≥n cerrada autom√°ticamente por inactividad (desde extendSession timers)');\n    }, TOTAL_DELAY);\n  };\n\n  // ========================\n  // üîê Funciones de autenticaci√≥n (sin cambios)\n  // ========================\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('access_token', data.access_token);\n        localStorage.setItem('refresh_token', data.refresh_token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        setUser(data.user);\n        return { success: true, user: data.user };\n      } else {\n        return { success: false, error: data.error || 'Error en el login' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Error de conexi√≥n con el servidor' };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        await fetch('http://localhost:5000/api/auth/logout', {\n          method: 'POST',\n          headers: { 'Authorization': `Bearer ${token}` },\n        });\n      }\n    } catch (error) {\n      console.error('Error durante logout:', error);\n    } finally {\n      // ocultar modal si est√° visible\n      setSessionExpiring(false);\n\n      setUser(null);\n      localStorage.removeItem('user');\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.setItem('logout_event', Date.now()); // sincroniza otras pesta√±as\n    }\n  };\n\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (!refreshToken) {\n        await logout();\n        return false;\n      }\n\n      const response = await fetch('http://localhost:5000/api/auth/refresh', {\n        method: 'POST',\n        headers: { 'Authorization': `Bearer ${refreshToken}` },\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('access_token', data.access_token);\n        if (data.refresh_token) {\n          localStorage.setItem('refresh_token', data.refresh_token);\n        }\n        if (data.user) {\n          setUser(data.user);\n          localStorage.setItem('user', JSON.stringify(data.user));\n        }\n        return true;\n      } else {\n        await logout();\n        return false;\n      }\n    } catch (error) {\n      console.error('Error refrescando token:', error);\n      await logout();\n      return false;\n    }\n  };\n\n  const hasPermission = (permission) => {\n    if (!user || !user.permissions) return false;\n    return user.permissions.includes(permission);\n  };\n\n  const authFetch = async (url, options = {}) => {\n    let token = localStorage.getItem('access_token');\n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n      },\n    };\n\n    let response = await fetch(url, config);\n\n    if (response.status === 401) {\n      const refreshed = await refreshToken();\n      if (refreshed) {\n        token = localStorage.getItem('access_token');\n        config.headers.Authorization = `Bearer ${token}`;\n        response = await fetch(url, config);\n      }\n    }\n\n    return response;\n  };\n\n  // ========================\n  // Render y modal\n  // ========================\n  return (\n    <AuthContext.Provider value={{\n      user,\n      login,\n      logout,\n      hasPermission,\n      loading,\n      authFetch,\n      sessionExpiring,\n      countdown,\n      extendSession\n    }}>\n      {children}\n\n      {/* üîî Modal de expiraci√≥n */}\n      {sessionExpiring && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\">\n          <div className=\"bg-white p-6 rounded-2xl shadow-lg text-center max-w-sm\">\n            <h2 className=\"text-lg font-semibold mb-2 text-gray-800\">Sesi√≥n a punto de expirar</h2>\n            <p className=\"text-gray-600 mb-4\">\n              Tu sesi√≥n se cerrar√° autom√°ticamente en <b>{countdown}s</b> por inactividad.\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <button\n                onClick={extendSession}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n              >\n                Mantener sesi√≥n\n              </button>\n              <button\n                onClick={logout}\n                className=\"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\"\n              >\n                Cerrar ahora\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtF,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACF;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA,MAAMgB,aAAa,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;EACjC,MAAMC,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC,CAAG;EACjC,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,WAAW,GAAGD,aAAa,IAAI,IAAI,CAAC;EAE1E,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAACkB,iBAAiB,CAAC,CAAC,CAAC;;EAE/D,MAAMK,YAAY,GAAGtB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMuB,kBAAkB,GAAGvB,MAAM,CAAC,IAAI,CAAC;EACvC,MAAMwB,oBAAoB,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACzC,MAAMyB,kBAAkB,GAAGzB,MAAM,CAACa,eAAe,CAAC;EAClDf,SAAS,CAAC,MAAM;IAAE2B,kBAAkB,CAACC,OAAO,GAAGb,eAAe;EAAE,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;;EAErF;EACA;EACA;EACAf,SAAS,CAAC,MAAM;IACd,MAAM6B,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC9C,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAExD,IAAIF,SAAS,IAAIG,WAAW,EAAE;QAC5BrB,OAAO,CAACsB,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CAAC;QAE9B,IAAI;UACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;YACtEC,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cAAE,eAAe,EAAE,UAAUN,WAAW;YAAG;UACtD,CAAC,CAAC;UACF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE,MAAMC,YAAY,CAAC,CAAC;QACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChD,MAAME,MAAM,CAAC,CAAC;QAChB;MACF;MACA9B,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAEDe,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA7B,SAAS,CAAC,MAAM;IACd,MAAM6C,UAAU,GAAIC,CAAC,IAAK;MACxB,IAAIA,CAAC,CAACC,GAAG,KAAK,cAAc,EAAE;QAC5BnC,OAAO,CAAC,IAAI,CAAC;QACbmB,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;QAC/BjB,YAAY,CAACiB,UAAU,CAAC,cAAc,CAAC;QACvCjB,YAAY,CAACiB,UAAU,CAAC,eAAe,CAAC;MAC1C;IACF,CAAC;IACDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEL,UAAU,CAAC;IAC9C,OAAO,MAAMI,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEN,UAAU,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA7C,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,IAAI,EAAE;;IAEX;IACA,MAAMyC,qBAAqB,GAAGA,CAAA,KAAM;MAClCC,YAAY,CAAC5B,kBAAkB,CAACG,OAAO,CAAC;MACxCyB,YAAY,CAAC3B,oBAAoB,CAACE,OAAO,CAAC;MAC1C0B,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;MACnCZ,kBAAkB,CAAC,KAAK,CAAC;MACzBO,YAAY,CAACJ,iBAAiB,CAAC;MAC/BwB,OAAO,CAACY,GAAG,CAAC,iBAAiB,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC;;MAE/D;MACAhC,kBAAkB,CAACG,OAAO,GAAG8B,UAAU,CAAC,MAAM;QAC5Cf,OAAO,CAACY,GAAG,CAAC,iCAAiC,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC9B,kBAAkB,CAACC,OAAO,EAAE;UAC/BZ,kBAAkB,CAAC,IAAI,CAAC;QAC1B;QACA2C,cAAc,CAAC,CAAC;MAClB,CAAC,EAAE1C,aAAa,CAAC;;MAEjB;MACAS,oBAAoB,CAACE,OAAO,GAAG8B,UAAU,CAAC,MAAM;QAC9CE,gBAAgB,CAAC,CAAC;MACpB,CAAC,EAAE1C,WAAW,CAAC;IACjB,CAAC;IAED,MAAMyC,cAAc,GAAGA,CAAA,KAAM;MAC3B;MACA,IAAIE,SAAS,GAAG1C,iBAAiB;MACjCwB,OAAO,CAACY,GAAG,CAAC,iCAAiC,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC;MAC/ElC,YAAY,CAACsC,SAAS,CAAC;MACvBP,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;MACnCJ,YAAY,CAACI,OAAO,GAAGkC,WAAW,CAAC,MAAM;QACvCD,SAAS,IAAI,CAAC;QACdtC,YAAY,CAACsC,SAAS,CAAC;QACvB,IAAIA,SAAS,IAAI,CAAC,EAAE;UAClBP,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;QACrC;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IAED,MAAMgC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnCjB,OAAO,CAACY,GAAG,CAAC,0BAA0B,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC;MACxEH,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;MACnCZ,kBAAkB,CAAC,KAAK,CAAC;MACzB;MACA,MAAM4B,MAAM,CAAC,CAAC;MACd;MACAD,OAAO,CAACY,GAAG,CAAC,mDAAmD,CAAC;IAClE,CAAC;;IAED;IACA,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;MAC/BpB,OAAO,CAACY,GAAG,CAAC,yCAAyC,EAAE5B,kBAAkB,CAACC,OAAO,CAAC;MAElF,IAAID,kBAAkB,CAACC,OAAO,EAAE,OAAO,CAAC;MACxCwB,qBAAqB,CAAC,CAAC;IACzB,CAAC;;IAED;IACAH,MAAM,CAACC,gBAAgB,CAAC,WAAW,EAAEa,kBAAkB,CAAC;IACxDd,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEa,kBAAkB,CAAC;IACtDd,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEa,kBAAkB,CAAC;IACrDd,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEa,kBAAkB,CAAC;;IAEpD;IACAX,qBAAqB,CAAC,CAAC;;IAEvB;IACA,OAAO,MAAM;MACXH,MAAM,CAACE,mBAAmB,CAAC,WAAW,EAAEY,kBAAkB,CAAC;MAC3Dd,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEY,kBAAkB,CAAC;MACzDd,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEY,kBAAkB,CAAC;MACxDd,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEY,kBAAkB,CAAC;MAEvDV,YAAY,CAAC5B,kBAAkB,CAACG,OAAO,CAAC;MACxCyB,YAAY,CAAC3B,oBAAoB,CAACE,OAAO,CAAC;MAC1C0B,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;IACrC,CAAC;IACD;EACF,CAAC,EAAE,CAACjB,IAAI,EAAEI,eAAe,CAAC,CAAC,CAAC,CAAC;;EAE7B;EACA;EACA;EACA,MAAMiD,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACAX,YAAY,CAAC5B,kBAAkB,CAACG,OAAO,CAAC;IACxCyB,YAAY,CAAC3B,oBAAoB,CAACE,OAAO,CAAC;IAC1C0B,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;;IAEnC;IACAZ,kBAAkB,CAAC,KAAK,CAAC;IACzBO,YAAY,CAACJ,iBAAiB,CAAC;;IAE/B;IACAM,kBAAkB,CAACG,OAAO,GAAG8B,UAAU,CAAC,MAAM;MAC5C1C,kBAAkB,CAAC,IAAI,CAAC;MACxB;MACA,IAAI6C,SAAS,GAAG1C,iBAAiB;MACjCI,YAAY,CAACsC,SAAS,CAAC;MACvBP,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;MACnCJ,YAAY,CAACI,OAAO,GAAGkC,WAAW,CAAC,MAAM;QACvCD,SAAS,IAAI,CAAC;QACdtC,YAAY,CAACsC,SAAS,CAAC;QACvB,IAAIA,SAAS,IAAI,CAAC,EAAEP,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;MACzD,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,EAAEX,aAAa,CAAC;IAEjBS,oBAAoB,CAACE,OAAO,GAAG8B,UAAU,CAAC,YAAY;MACpD;MACAJ,aAAa,CAAC9B,YAAY,CAACI,OAAO,CAAC;MACnCZ,kBAAkB,CAAC,KAAK,CAAC;MACzB,MAAM4B,MAAM,CAAC,CAAC;MACdD,OAAO,CAACY,GAAG,CAAC,gFAAgF,CAAC;IAC/F,CAAC,EAAErC,WAAW,CAAC;EACjB,CAAC;;EAED;EACA;EACA;EACA,MAAM+C,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAM/B,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/C6B,IAAI,EAAElC,IAAI,CAACmC,SAAS,CAAC;UAAEH,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMG,IAAI,GAAG,MAAMlC,QAAQ,CAACmC,IAAI,CAAC,CAAC;MAElC,IAAInC,QAAQ,CAACI,EAAE,EAAE;QACfT,YAAY,CAACyC,OAAO,CAAC,cAAc,EAAEF,IAAI,CAACG,YAAY,CAAC;QACvD1C,YAAY,CAACyC,OAAO,CAAC,eAAe,EAAEF,IAAI,CAACI,aAAa,CAAC;QACzD3C,YAAY,CAACyC,OAAO,CAAC,MAAM,EAAEtC,IAAI,CAACmC,SAAS,CAACC,IAAI,CAAC3D,IAAI,CAAC,CAAC;QACvDC,OAAO,CAAC0D,IAAI,CAAC3D,IAAI,CAAC;QAClB,OAAO;UAAEgE,OAAO,EAAE,IAAI;UAAEhE,IAAI,EAAE2D,IAAI,CAAC3D;QAAK,CAAC;MAC3C,CAAC,MAAM;QACL,OAAO;UAAEgE,OAAO,EAAE,KAAK;UAAEjC,KAAK,EAAE4B,IAAI,CAAC5B,KAAK,IAAI;QAAoB,CAAC;MACrE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QAAEiC,OAAO,EAAE,KAAK;QAAEjC,KAAK,EAAE;MAAoC,CAAC;IACvE;EACF,CAAC;EAED,MAAME,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMgC,KAAK,GAAG7C,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAClD,IAAI4C,KAAK,EAAE;QACT,MAAMvC,KAAK,CAAC,uCAAuC,EAAE;UACnDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUqC,KAAK;UAAG;QAChD,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOlC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,SAAS;MACR;MACA1B,kBAAkB,CAAC,KAAK,CAAC;MAEzBJ,OAAO,CAAC,IAAI,CAAC;MACbmB,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;MAC/BjB,YAAY,CAACiB,UAAU,CAAC,cAAc,CAAC;MACvCjB,YAAY,CAACiB,UAAU,CAAC,eAAe,CAAC;MACxCjB,YAAY,CAACyC,OAAO,CAAC,cAAc,EAAEhB,IAAI,CAACqB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD;EACF,CAAC;EAED,MAAMpC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMA,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MAC1D,IAAI,CAACS,YAAY,EAAE;QACjB,MAAMG,MAAM,CAAC,CAAC;QACd,OAAO,KAAK;MACd;MAEA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,eAAe,EAAE,UAAUE,YAAY;QAAG;MACvD,CAAC,CAAC;MAEF,MAAM6B,IAAI,GAAG,MAAMlC,QAAQ,CAACmC,IAAI,CAAC,CAAC;MAElC,IAAInC,QAAQ,CAACI,EAAE,EAAE;QACfT,YAAY,CAACyC,OAAO,CAAC,cAAc,EAAEF,IAAI,CAACG,YAAY,CAAC;QACvD,IAAIH,IAAI,CAACI,aAAa,EAAE;UACtB3C,YAAY,CAACyC,OAAO,CAAC,eAAe,EAAEF,IAAI,CAACI,aAAa,CAAC;QAC3D;QACA,IAAIJ,IAAI,CAAC3D,IAAI,EAAE;UACbC,OAAO,CAAC0D,IAAI,CAAC3D,IAAI,CAAC;UAClBoB,YAAY,CAACyC,OAAO,CAAC,MAAM,EAAEtC,IAAI,CAACmC,SAAS,CAACC,IAAI,CAAC3D,IAAI,CAAC,CAAC;QACzD;QACA,OAAO,IAAI;MACb,CAAC,MAAM;QACL,MAAMiC,MAAM,CAAC,CAAC;QACd,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAME,MAAM,CAAC,CAAC;MACd,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMkC,aAAa,GAAIC,UAAU,IAAK;IACpC,IAAI,CAACpE,IAAI,IAAI,CAACA,IAAI,CAACqE,WAAW,EAAE,OAAO,KAAK;IAC5C,OAAOrE,IAAI,CAACqE,WAAW,CAACC,QAAQ,CAACF,UAAU,CAAC;EAC9C,CAAC;EAED,MAAMG,SAAS,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC7C,IAAIR,KAAK,GAAG7C,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAChD,MAAMqD,MAAM,GAAG;MACb,GAAGD,OAAO;MACV7C,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAG6C,OAAO,CAAC7C,OAAO;QAClB,eAAe,EAAE,UAAUqC,KAAK;MAClC;IACF,CAAC;IAED,IAAIxC,QAAQ,GAAG,MAAMC,KAAK,CAAC8C,GAAG,EAAEE,MAAM,CAAC;IAEvC,IAAIjD,QAAQ,CAACkD,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAMC,SAAS,GAAG,MAAM9C,YAAY,CAAC,CAAC;MACtC,IAAI8C,SAAS,EAAE;QACbX,KAAK,GAAG7C,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;QAC5CqD,MAAM,CAAC9C,OAAO,CAACiD,aAAa,GAAG,UAAUZ,KAAK,EAAE;QAChDxC,QAAQ,GAAG,MAAMC,KAAK,CAAC8C,GAAG,EAAEE,MAAM,CAAC;MACrC;IACF;IAEA,OAAOjD,QAAQ;EACjB,CAAC;;EAED;EACA;EACA;EACA,oBACEhC,OAAA,CAACC,WAAW,CAACoF,QAAQ;IAACC,KAAK,EAAE;MAC3B/E,IAAI;MACJsD,KAAK;MACLrB,MAAM;MACNkC,aAAa;MACbjE,OAAO;MACPqE,SAAS;MACTnE,eAAe;MACfO,SAAS;MACT0C;IACF,CAAE;IAAAvD,QAAA,GACCA,QAAQ,EAGRM,eAAe,iBACdX,OAAA;MAAKuF,SAAS,EAAC,gFAAgF;MAAAlF,QAAA,eAC7FL,OAAA;QAAKuF,SAAS,EAAC,yDAAyD;QAAAlF,QAAA,gBACtEL,OAAA;UAAIuF,SAAS,EAAC,0CAA0C;UAAAlF,QAAA,EAAC;QAAyB;UAAAmF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvF3F,OAAA;UAAGuF,SAAS,EAAC,oBAAoB;UAAAlF,QAAA,GAAC,mDACQ,eAAAL,OAAA;YAAAK,QAAA,GAAIa,SAAS,EAAC,GAAC;UAAA;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,qBAC7D;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJ3F,OAAA;UAAKuF,SAAS,EAAC,2BAA2B;UAAAlF,QAAA,gBACxCL,OAAA;YACE4F,OAAO,EAAEhC,aAAc;YACvB2B,SAAS,EAAC,+DAA+D;YAAAlF,QAAA,EAC1E;UAED;YAAAmF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT3F,OAAA;YACE4F,OAAO,EAAEpD,MAAO;YAChB+C,SAAS,EAAC,kEAAkE;YAAAlF,QAAA,EAC7E;UAED;YAAAmF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAE3B,CAAC;AAACrF,GAAA,CAjXWF,YAAY;AAAAyF,EAAA,GAAZzF,YAAY;AAAA,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}