{"ast":null,"code":"var _jsxFileName = \"D:\\\\Usuarios\\\\FRANCO\\\\Desktop\\\\proyectoparroquia\\\\parroquia-frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Cargar usuario desde localStorage al inicio y verificar token\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         // Verificar si el token es v√°lido\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: {\n//               'Authorization': `Bearer ${accessToken}`,\n//             },\n//           });\n\n//           if (!response.ok) {\n//             // Token inv√°lido, intentar refrescar\n//             await refreshToken();\n//           }\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//         console.log('üîê Intentando login con:', email);\n\n//         const response = await fetch('http://localhost:5000/api/auth/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password }),\n//         });\n\n//         const data = await response.json();\n//         console.log('üì¶ Respuesta del login:', data);\n\n//         if (response.ok) {\n//             console.log('‚úÖ Login exitoso. Tokens recibidos:');\n//             console.log('Access Token:', data.access_token ? 'S√ç' : 'NO');\n//             console.log('Refresh Token:', data.refresh_token ? 'S√ç' : 'NO');\n//             console.log('User:', data.user ? 'S√ç' : 'NO');\n\n//             // Guardar en localStorage\n//             localStorage.setItem('access_token', data.access_token);\n//             localStorage.setItem('refresh_token', data.refresh_token);\n//             localStorage.setItem('user', JSON.stringify(data.user));\n\n//             console.log('üíæ Token guardado en localStorage:', \n//                 localStorage.getItem('access_token') ? 'S√ç' : 'NO');\n\n//             setUser(data.user);\n//             return { success: true, user: data.user };\n//         } else {\n//             console.log('‚ùå Error en login:', data.error);\n//             return { success: false, error: data.error || 'Error en el login' };\n//         }\n//     } catch (error) {\n//         console.log('üåê Error de conexi√≥n:', error);\n//         return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${token}`,\n//           },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': `Bearer ${refreshToken}`,\n//         },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         // üîß Si se genera un nuevo refresh token, reemplazar el anterior\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   // Funci√≥n para hacer requests autenticadas con refresh autom√°tico\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     // Si el token expir√≥, intentar refrescar y reenviar la request\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ \n//       user, \n//       login, \n//       logout, \n//       hasPermission, \n//       loading,\n//       authFetch \n//     }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// üîí Variable global para mutex de refresh token (evita llamadas simult√°neas)\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nlet refreshPromise = null;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [sessionExpiring, setSessionExpiring] = useState(false);\n\n  // ‚öôÔ∏è Ajusta aqu√≠ los tiempos (para prueba est√°n en 20s / 30s)\n  const WARNING_DELAY_SECONDS = 20; // mostrar aviso (20 s)\n  const TOTAL_DELAY_SECONDS = 30; // cerrar sesi√≥n por inactividad (30 s)\n\n  // ‚öôÔ∏è Conversi√≥n autom√°tica a milisegundos\n  const WARNING_DELAY = WARNING_DELAY_SECONDS * 1000;\n  const TOTAL_DELAY = TOTAL_DELAY_SECONDS * 1000;\n\n  // ‚öôÔ∏è Cu√°ntos segundos durar√° la cuenta regresiva (diferencia entre ambos)\n  const COUNTDOWN_SECONDS = TOTAL_DELAY_SECONDS - WARNING_DELAY_SECONDS;\n  const [countdown, setCountdown] = useState(COUNTDOWN_SECONDS);\n  const countdownRef = useRef(null);\n  const inactivityTimerRef = useRef(null);\n  const totalSessionTimerRef = useRef(null);\n  const sessionExpiringRef = useRef(sessionExpiring);\n  useEffect(() => {\n    sessionExpiringRef.current = sessionExpiring;\n  }, [sessionExpiring]);\n\n  // ========================\n  // üü¢ Inicializaci√≥n de sesi√≥n\n  // ========================\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const savedUser = localStorage.getItem('user');\n      const accessToken = localStorage.getItem('access_token');\n      if (savedUser && accessToken) {\n        setUser(JSON.parse(savedUser));\n        try {\n          const response = await fetch('http://localhost:5000/api/users/profile', {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${accessToken}`\n            }\n          });\n          if (!response.ok) await refreshToken();\n        } catch (error) {\n          console.error('Error verificando token:', error);\n          await logout();\n        }\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n\n  // ========================\n  // üîÅ Sincronizar logout entre pesta√±as\n  // ========================\n  useEffect(() => {\n    const syncLogout = e => {\n      if (e.key === 'logout_event') {\n        setUser(null);\n        localStorage.removeItem('user');\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n      }\n    };\n    window.addEventListener('storage', syncLogout);\n    return () => window.removeEventListener('storage', syncLogout);\n  }, []);\n\n  // ========================\n  // ‚è∞ Control de inactividad\n  // ========================\n  useEffect(() => {\n    if (!user) return;\n    const resetInactivityTimers = () => {\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      setCountdown(COUNTDOWN_SECONDS);\n      console.log('üîÑ Reset timers', new Date().toLocaleTimeString());\n      inactivityTimerRef.current = setTimeout(() => {\n        setSessionExpiring(true);\n        startCountdown();\n      }, WARNING_DELAY);\n      totalSessionTimerRef.current = setTimeout(() => {\n        handleAutoLogout();\n      }, TOTAL_DELAY);\n    };\n    const startCountdown = () => {\n      console.log('‚è≥ Mostrando aviso de expiraci√≥n', new Date().toLocaleTimeString());\n      setSessionExpiring(true);\n      let remaining = COUNTDOWN_SECONDS;\n      setCountdown(remaining);\n      clearInterval(countdownRef.current);\n      countdownRef.current = setInterval(() => {\n        remaining -= 1;\n        setCountdown(remaining);\n        if (remaining <= 0) {\n          clearInterval(countdownRef.current);\n        }\n      }, 1000);\n    };\n    const handleAutoLogout = async () => {\n      console.log('üö™ Auto logout triggered', new Date().toLocaleTimeString());\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n      console.log('‚ö†Ô∏è Sesi√≥n cerrada autom√°ticamente por inactividad');\n    };\n    const handleUserActivity = () => {\n      console.log('üñ±Ô∏è Actividad detectada, modal visible?', sessionExpiringRef.current);\n      if (sessionExpiringRef.current) return;\n      resetInactivityTimers();\n    };\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    window.addEventListener('scroll', handleUserActivity);\n    window.addEventListener('click', handleUserActivity);\n    resetInactivityTimers();\n    return () => {\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('scroll', handleUserActivity);\n      window.removeEventListener('click', handleUserActivity);\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n    };\n  }, [user === null || user === void 0 ? void 0 : user.id, WARNING_DELAY, TOTAL_DELAY, COUNTDOWN_SECONDS]); // ‚úÖ CAMBIO: user?.id en lugar de user\n\n  // ========================\n  // üîÅ Extender sesi√≥n\n  // ========================\n  const extendSession = () => {\n    clearTimeout(inactivityTimerRef.current);\n    clearTimeout(totalSessionTimerRef.current);\n    clearInterval(countdownRef.current);\n    setSessionExpiring(false);\n    setCountdown(COUNTDOWN_SECONDS);\n    inactivityTimerRef.current = setTimeout(() => {\n      setSessionExpiring(true);\n      let remaining = COUNTDOWN_SECONDS;\n      setCountdown(remaining);\n      clearInterval(countdownRef.current);\n      countdownRef.current = setInterval(() => {\n        remaining -= 1;\n        setCountdown(remaining);\n        if (remaining <= 0) clearInterval(countdownRef.current);\n      }, 1000);\n    }, WARNING_DELAY);\n    totalSessionTimerRef.current = setTimeout(async () => {\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n      console.log('‚ö†Ô∏è Sesi√≥n cerrada autom√°ticamente por inactividad (desde extendSession timers)');\n    }, TOTAL_DELAY);\n  };\n\n  // ========================\n  // üîê Login\n  // ========================\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('access_token', data.access_token);\n        localStorage.setItem('refresh_token', data.refresh_token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        setUser(data.user);\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error en el login'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Error de conexi√≥n con el servidor'\n      };\n    }\n  };\n\n  // ========================\n  // üö™ Logout\n  // ========================\n  const logout = async () => {\n    try {\n      setSessionExpiring(false);\n      const accessToken = localStorage.getItem('access_token');\n      const refreshToken = localStorage.getItem('refresh_token');\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      if (accessToken) headers['Authorization'] = `Bearer ${accessToken}`;\n      await fetch('http://localhost:5000/api/auth/logout', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          refresh_token: refreshToken\n        })\n      });\n    } catch (error) {\n      console.error('Error durante logout:', error);\n    } finally {\n      setUser(null);\n      localStorage.removeItem('user');\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.setItem('logout_event', Date.now());\n\n      // üîí Limpiar mutex de refresh al hacer logout\n      refreshPromise = null;\n    }\n  };\n\n  // ========================\n  // üîÑ Refresh Token con MUTEX (evita llamadas simult√°neas)\n  // ========================\n  const refreshToken = async () => {\n    // üîí Si ya hay un refresh en curso, reutilizar esa promesa\n    if (refreshPromise) {\n      console.log('‚è≥ Refresh ya en curso, esperando resultado...');\n      return refreshPromise;\n    }\n    try {\n      console.log('üîÑ Iniciando refresh token...', new Date().toLocaleTimeString());\n\n      // üîí Crear la promesa y guardarla\n      refreshPromise = (async () => {\n        const storedRefreshToken = localStorage.getItem('refresh_token');\n        if (!storedRefreshToken) {\n          console.log('‚ùå No hay refresh token disponible');\n          await logout();\n          return false;\n        }\n        const response = await fetch('http://localhost:5000/api/auth/refresh', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${storedRefreshToken}`\n          }\n        });\n        const data = await response.json();\n        if (response.ok) {\n          console.log('‚úÖ Refresh exitoso, guardando nuevos tokens');\n          localStorage.setItem('access_token', data.access_token);\n\n          // üîÑ Guardar nuevo refresh token si viene (rotaci√≥n)\n          if (data.refresh_token) {\n            console.log('üîÑ Rotando refresh token');\n            localStorage.setItem('refresh_token', data.refresh_token);\n          }\n\n          // ‚úÖ ELIMINADO: No actualizar el user en el estado\n          // Esto evita que el useEffect de inactividad se re-ejecute\n\n          return true;\n        } else {\n          console.log('‚ùå Refresh fall√≥:', data.error || response.statusText);\n          await logout();\n          return false;\n        }\n      })();\n\n      // Esperar el resultado\n      const result = await refreshPromise;\n      return result;\n    } catch (error) {\n      console.error('üí• Error refrescando token:', error);\n      await logout();\n      return false;\n    } finally {\n      // üîí Limpiar la promesa despu√©s de completarse (permite futuros refresh)\n      setTimeout(() => {\n        refreshPromise = null;\n        console.log('üîì Mutex de refresh liberado');\n      }, 100);\n    }\n  };\n\n  // ========================\n  // üîë Has Permission\n  // ========================\n  const hasPermission = permission => {\n    if (!user || !user.permissions) return false;\n    return user.permissions.includes(permission);\n  };\n\n  // ========================\n  // üåê Auth Fetch con refresh autom√°tico\n  // ========================\n  const authFetch = async (url, options = {}) => {\n    let token = localStorage.getItem('access_token');\n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n        'Authorization': `Bearer ${token}`\n      }\n    };\n    let response = await fetch(url, config);\n\n    // Si el token expir√≥ (401), intentar refrescar UNA SOLA VEZ\n    if (response.status === 401) {\n      console.log('üîÑ Token expirado, intentando refresh...');\n      const refreshed = await refreshToken();\n      if (refreshed) {\n        // Obtener el nuevo token y reintentar\n        token = localStorage.getItem('access_token');\n        config.headers.Authorization = `Bearer ${token}`;\n        console.log('üîÑ Reintentando request con nuevo token...');\n        response = await fetch(url, config);\n      } else {\n        console.log('‚ùå No se pudo refrescar token, redirigiendo a login');\n      }\n    }\n    return response;\n  };\n\n  // ========================\n  // üé® Render\n  // ========================\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      hasPermission,\n      loading,\n      authFetch,\n      sessionExpiring,\n      countdown,\n      extendSession\n    },\n    children: [children, sessionExpiring && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-2xl shadow-lg text-center max-w-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold mb-2 text-gray-800\",\n          children: \"Sesi\\xF3n a punto de expirar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mb-4\",\n          children: [\"Tu sesi\\xF3n se cerrar\\xE1 autom\\xE1ticamente en \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: [countdown, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 55\n          }, this), \" por inactividad.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: extendSession,\n            className: \"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\",\n            children: \"Mantener sesi\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: logout,\n            className: \"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\",\n            children: \"Cerrar ahora\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 558,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"I6p7gHxCXI/DEHXDGYZCAuJJ/Qk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","refreshPromise","AuthProvider","children","_s2","user","setUser","loading","setLoading","sessionExpiring","setSessionExpiring","WARNING_DELAY_SECONDS","TOTAL_DELAY_SECONDS","WARNING_DELAY","TOTAL_DELAY","COUNTDOWN_SECONDS","countdown","setCountdown","countdownRef","inactivityTimerRef","totalSessionTimerRef","sessionExpiringRef","current","initializeAuth","savedUser","localStorage","getItem","accessToken","JSON","parse","response","fetch","method","headers","ok","refreshToken","error","console","logout","syncLogout","e","key","removeItem","window","addEventListener","removeEventListener","resetInactivityTimers","clearTimeout","clearInterval","log","Date","toLocaleTimeString","setTimeout","startCountdown","handleAutoLogout","remaining","setInterval","handleUserActivity","id","extendSession","login","email","password","body","stringify","data","json","setItem","access_token","refresh_token","success","now","storedRefreshToken","statusText","result","hasPermission","permission","permissions","includes","authFetch","url","options","token","config","status","refreshed","Authorization","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Usuarios/FRANCO/Desktop/proyectoparroquia/parroquia-frontend/src/contexts/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Cargar usuario desde localStorage al inicio y verificar token\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         // Verificar si el token es v√°lido\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: {\n//               'Authorization': `Bearer ${accessToken}`,\n//             },\n//           });\n\n//           if (!response.ok) {\n//             // Token inv√°lido, intentar refrescar\n//             await refreshToken();\n//           }\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//         console.log('üîê Intentando login con:', email);\n\n//         const response = await fetch('http://localhost:5000/api/auth/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password }),\n//         });\n\n//         const data = await response.json();\n//         console.log('üì¶ Respuesta del login:', data);\n\n//         if (response.ok) {\n//             console.log('‚úÖ Login exitoso. Tokens recibidos:');\n//             console.log('Access Token:', data.access_token ? 'S√ç' : 'NO');\n//             console.log('Refresh Token:', data.refresh_token ? 'S√ç' : 'NO');\n//             console.log('User:', data.user ? 'S√ç' : 'NO');\n\n//             // Guardar en localStorage\n//             localStorage.setItem('access_token', data.access_token);\n//             localStorage.setItem('refresh_token', data.refresh_token);\n//             localStorage.setItem('user', JSON.stringify(data.user));\n\n//             console.log('üíæ Token guardado en localStorage:', \n//                 localStorage.getItem('access_token') ? 'S√ç' : 'NO');\n\n//             setUser(data.user);\n//             return { success: true, user: data.user };\n//         } else {\n//             console.log('‚ùå Error en login:', data.error);\n//             return { success: false, error: data.error || 'Error en el login' };\n//         }\n//     } catch (error) {\n//         console.log('üåê Error de conexi√≥n:', error);\n//         return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${token}`,\n//           },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': `Bearer ${refreshToken}`,\n//         },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         // üîß Si se genera un nuevo refresh token, reemplazar el anterior\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   // Funci√≥n para hacer requests autenticadas con refresh autom√°tico\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     // Si el token expir√≥, intentar refrescar y reenviar la request\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ \n//       user, \n//       login, \n//       logout, \n//       hasPermission, \n//       loading,\n//       authFetch \n//     }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\n// üîí Variable global para mutex de refresh token (evita llamadas simult√°neas)\nlet refreshPromise = null;\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [sessionExpiring, setSessionExpiring] = useState(false);\n\n  // ‚öôÔ∏è Ajusta aqu√≠ los tiempos (para prueba est√°n en 20s / 30s)\n  const WARNING_DELAY_SECONDS = 20; // mostrar aviso (20 s)\n  const TOTAL_DELAY_SECONDS = 30;   // cerrar sesi√≥n por inactividad (30 s)\n\n  // ‚öôÔ∏è Conversi√≥n autom√°tica a milisegundos\n  const WARNING_DELAY = WARNING_DELAY_SECONDS * 1000;\n  const TOTAL_DELAY = TOTAL_DELAY_SECONDS * 1000;\n\n  // ‚öôÔ∏è Cu√°ntos segundos durar√° la cuenta regresiva (diferencia entre ambos)\n  const COUNTDOWN_SECONDS = TOTAL_DELAY_SECONDS - WARNING_DELAY_SECONDS;\n\n  const [countdown, setCountdown] = useState(COUNTDOWN_SECONDS);\n\n  const countdownRef = useRef(null);\n  const inactivityTimerRef = useRef(null);\n  const totalSessionTimerRef = useRef(null);\n  const sessionExpiringRef = useRef(sessionExpiring);\n  \n  useEffect(() => {\n    sessionExpiringRef.current = sessionExpiring;\n  }, [sessionExpiring]);\n\n  // ========================\n  // üü¢ Inicializaci√≥n de sesi√≥n\n  // ========================\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const savedUser = localStorage.getItem('user');\n      const accessToken = localStorage.getItem('access_token');\n\n      if (savedUser && accessToken) {\n        setUser(JSON.parse(savedUser));\n\n        try {\n          const response = await fetch('http://localhost:5000/api/users/profile', {\n            method: 'GET',\n            headers: { 'Authorization': `Bearer ${accessToken}` },\n          });\n          if (!response.ok) await refreshToken();\n        } catch (error) {\n          console.error('Error verificando token:', error);\n          await logout();\n        }\n      }\n      setLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  // ========================\n  // üîÅ Sincronizar logout entre pesta√±as\n  // ========================\n  useEffect(() => {\n    const syncLogout = (e) => {\n      if (e.key === 'logout_event') {\n        setUser(null);\n        localStorage.removeItem('user');\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n      }\n    };\n    window.addEventListener('storage', syncLogout);\n    return () => window.removeEventListener('storage', syncLogout);\n  }, []);\n\n  // ========================\n  // ‚è∞ Control de inactividad\n  // ========================\n  useEffect(() => {\n    if (!user) return;\n\n    const resetInactivityTimers = () => {\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      setCountdown(COUNTDOWN_SECONDS);\n      console.log('üîÑ Reset timers', new Date().toLocaleTimeString());\n\n      inactivityTimerRef.current = setTimeout(() => {\n        setSessionExpiring(true);\n        startCountdown();\n      }, WARNING_DELAY);\n\n      totalSessionTimerRef.current = setTimeout(() => {\n        handleAutoLogout();\n      }, TOTAL_DELAY);\n    };\n\n    const startCountdown = () => {\n      console.log('‚è≥ Mostrando aviso de expiraci√≥n', new Date().toLocaleTimeString());\n      setSessionExpiring(true);\n      let remaining = COUNTDOWN_SECONDS;\n      setCountdown(remaining);\n\n      clearInterval(countdownRef.current);\n      countdownRef.current = setInterval(() => {\n        remaining -= 1;\n        setCountdown(remaining);\n        if (remaining <= 0) {\n          clearInterval(countdownRef.current);\n        }\n      }, 1000);\n    };\n\n    const handleAutoLogout = async () => {\n      console.log('üö™ Auto logout triggered', new Date().toLocaleTimeString());\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n      console.log('‚ö†Ô∏è Sesi√≥n cerrada autom√°ticamente por inactividad');\n    };\n\n    const handleUserActivity = () => {\n      console.log('üñ±Ô∏è Actividad detectada, modal visible?', sessionExpiringRef.current);\n      if (sessionExpiringRef.current) return;\n      resetInactivityTimers();\n    };\n\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    window.addEventListener('scroll', handleUserActivity);\n    window.addEventListener('click', handleUserActivity);\n\n    resetInactivityTimers();\n\n    return () => {\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('scroll', handleUserActivity);\n      window.removeEventListener('click', handleUserActivity);\n\n      clearTimeout(inactivityTimerRef.current);\n      clearTimeout(totalSessionTimerRef.current);\n      clearInterval(countdownRef.current);\n    };\n  }, [user?.id, WARNING_DELAY, TOTAL_DELAY, COUNTDOWN_SECONDS]); // ‚úÖ CAMBIO: user?.id en lugar de user\n\n  // ========================\n  // üîÅ Extender sesi√≥n\n  // ========================\n  const extendSession = () => {\n    clearTimeout(inactivityTimerRef.current);\n    clearTimeout(totalSessionTimerRef.current);\n    clearInterval(countdownRef.current);\n\n    setSessionExpiring(false);\n    setCountdown(COUNTDOWN_SECONDS);\n\n    inactivityTimerRef.current = setTimeout(() => {\n      setSessionExpiring(true);\n      let remaining = COUNTDOWN_SECONDS;\n      setCountdown(remaining);\n      clearInterval(countdownRef.current);\n      countdownRef.current = setInterval(() => {\n        remaining -= 1;\n        setCountdown(remaining);\n        if (remaining <= 0) clearInterval(countdownRef.current);\n      }, 1000);\n    }, WARNING_DELAY);\n\n    totalSessionTimerRef.current = setTimeout(async () => {\n      clearInterval(countdownRef.current);\n      setSessionExpiring(false);\n      await logout();\n      console.log('‚ö†Ô∏è Sesi√≥n cerrada autom√°ticamente por inactividad (desde extendSession timers)');\n    }, TOTAL_DELAY);\n  };\n\n  // ========================\n  // üîê Login\n  // ========================\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('access_token', data.access_token);\n        localStorage.setItem('refresh_token', data.refresh_token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        setUser(data.user);\n        return { success: true, user: data.user };\n      } else {\n        return { success: false, error: data.error || 'Error en el login' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Error de conexi√≥n con el servidor' };\n    }\n  };\n\n  // ========================\n  // üö™ Logout\n  // ========================\n  const logout = async () => {\n    try {\n      setSessionExpiring(false);\n\n      const accessToken = localStorage.getItem('access_token');\n      const refreshToken = localStorage.getItem('refresh_token');\n\n      const headers = { 'Content-Type': 'application/json' };\n      if (accessToken) headers['Authorization'] = `Bearer ${accessToken}`;\n\n      await fetch('http://localhost:5000/api/auth/logout', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({ refresh_token: refreshToken })\n      });\n    } catch (error) {\n      console.error('Error durante logout:', error);\n    } finally {\n      setUser(null);\n      localStorage.removeItem('user');\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.setItem('logout_event', Date.now());\n      \n      // üîí Limpiar mutex de refresh al hacer logout\n      refreshPromise = null;\n    }\n  };\n\n  // ========================\n  // üîÑ Refresh Token con MUTEX (evita llamadas simult√°neas)\n  // ========================\n  const refreshToken = async () => {\n    // üîí Si ya hay un refresh en curso, reutilizar esa promesa\n    if (refreshPromise) {\n      console.log('‚è≥ Refresh ya en curso, esperando resultado...');\n      return refreshPromise;\n    }\n\n    try {\n      console.log('üîÑ Iniciando refresh token...', new Date().toLocaleTimeString());\n      \n      // üîí Crear la promesa y guardarla\n      refreshPromise = (async () => {\n        const storedRefreshToken = localStorage.getItem('refresh_token');\n        if (!storedRefreshToken) {\n          console.log('‚ùå No hay refresh token disponible');\n          await logout();\n          return false;\n        }\n\n        const response = await fetch('http://localhost:5000/api/auth/refresh', {\n          method: 'POST',\n          headers: { 'Authorization': `Bearer ${storedRefreshToken}` },\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n          console.log('‚úÖ Refresh exitoso, guardando nuevos tokens');\n          localStorage.setItem('access_token', data.access_token);\n          \n          // üîÑ Guardar nuevo refresh token si viene (rotaci√≥n)\n          if (data.refresh_token) {\n            console.log('üîÑ Rotando refresh token');\n            localStorage.setItem('refresh_token', data.refresh_token);\n          }\n          \n          // ‚úÖ ELIMINADO: No actualizar el user en el estado\n          // Esto evita que el useEffect de inactividad se re-ejecute\n          \n          return true;\n        } else {\n          console.log('‚ùå Refresh fall√≥:', data.error || response.statusText);\n          await logout();\n          return false;\n        }\n      })();\n\n      // Esperar el resultado\n      const result = await refreshPromise;\n      return result;\n\n    } catch (error) {\n      console.error('üí• Error refrescando token:', error);\n      await logout();\n      return false;\n    } finally {\n      // üîí Limpiar la promesa despu√©s de completarse (permite futuros refresh)\n      setTimeout(() => {\n        refreshPromise = null;\n        console.log('üîì Mutex de refresh liberado');\n      }, 100);\n    }\n  };\n\n  // ========================\n  // üîë Has Permission\n  // ========================\n  const hasPermission = (permission) => {\n    if (!user || !user.permissions) return false;\n    return user.permissions.includes(permission);\n  };\n\n  // ========================\n  // üåê Auth Fetch con refresh autom√°tico\n  // ========================\n  const authFetch = async (url, options = {}) => {\n    let token = localStorage.getItem('access_token');\n\n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n      },\n    };\n\n    let response = await fetch(url, config);\n\n    // Si el token expir√≥ (401), intentar refrescar UNA SOLA VEZ\n    if (response.status === 401) {\n      console.log('üîÑ Token expirado, intentando refresh...');\n      const refreshed = await refreshToken();\n      \n      if (refreshed) {\n        // Obtener el nuevo token y reintentar\n        token = localStorage.getItem('access_token');\n        config.headers.Authorization = `Bearer ${token}`;\n        console.log('üîÑ Reintentando request con nuevo token...');\n        response = await fetch(url, config);\n      } else {\n        console.log('‚ùå No se pudo refrescar token, redirigiendo a login');\n      }\n    }\n\n    return response;\n  };\n\n  // ========================\n  // üé® Render\n  // ========================\n  return (\n    <AuthContext.Provider value={{\n      user,\n      login,\n      logout,\n      hasPermission,\n      loading,\n      authFetch,\n      sessionExpiring,\n      countdown,\n      extendSession\n    }}>\n      {children}\n\n      {/* üîî Modal de expiraci√≥n */}\n      {sessionExpiring && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\">\n          <div className=\"bg-white p-6 rounded-2xl shadow-lg text-center max-w-sm\">\n            <h2 className=\"text-lg font-semibold mb-2 text-gray-800\">Sesi√≥n a punto de expirar</h2>\n            <p className=\"text-gray-600 mb-4\">\n              Tu sesi√≥n se cerrar√° autom√°ticamente en <b>{countdown}s</b> por inactividad.\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <button\n                onClick={extendSession}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n              >\n                Mantener sesi√≥n\n              </button>\n              <button\n                onClick={logout}\n                className=\"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\"\n              >\n                Cerrar ahora\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtF,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,IAAIE,cAAc,GAAG,IAAI;AAEzB,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}