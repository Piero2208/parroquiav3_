{"ast":null,"code":"// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Cargar usuario desde localStorage al inicio y verificar token\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         // Verificar si el token es v√°lido\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: {\n//               'Authorization': `Bearer ${accessToken}`,\n//             },\n//           });\n\n//           if (!response.ok) {\n//             // Token inv√°lido, intentar refrescar\n//             await refreshToken();\n//           }\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//         console.log('üîê Intentando login con:', email);\n\n//         const response = await fetch('http://localhost:5000/api/auth/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password }),\n//         });\n\n//         const data = await response.json();\n//         console.log('üì¶ Respuesta del login:', data);\n\n//         if (response.ok) {\n//             console.log('‚úÖ Login exitoso. Tokens recibidos:');\n//             console.log('Access Token:', data.access_token ? 'S√ç' : 'NO');\n//             console.log('Refresh Token:', data.refresh_token ? 'S√ç' : 'NO');\n//             console.log('User:', data.user ? 'S√ç' : 'NO');\n\n//             // Guardar en localStorage\n//             localStorage.setItem('access_token', data.access_token);\n//             localStorage.setItem('refresh_token', data.refresh_token);\n//             localStorage.setItem('user', JSON.stringify(data.user));\n\n//             console.log('üíæ Token guardado en localStorage:', \n//                 localStorage.getItem('access_token') ? 'S√ç' : 'NO');\n\n//             setUser(data.user);\n//             return { success: true, user: data.user };\n//         } else {\n//             console.log('‚ùå Error en login:', data.error);\n//             return { success: false, error: data.error || 'Error en el login' };\n//         }\n//     } catch (error) {\n//         console.log('üåê Error de conexi√≥n:', error);\n//         return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${token}`,\n//           },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': `Bearer ${refreshToken}`,\n//         },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         // üîß Si se genera un nuevo refresh token, reemplazar el anterior\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   // Funci√≥n para hacer requests autenticadas con refresh autom√°tico\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     // Si el token expir√≥, intentar refrescar y reenviar la request\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ \n//       user, \n//       login, \n//       logout, \n//       hasPermission, \n//       loading,\n//       authFetch \n//     }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [sessionExpiring, setSessionExpiring] = useState(false);\n//   //const [countdown, setCountdown] = useState(180); // 3 minutos\n//   const [countdown, setCountdown] = useState(10); // 10 segundos (solo prueba)\n//   //\n//   const countdownRef = useRef(null);\n//   const inactivityTimerRef = useRef(null);\n//   const totalSessionTimerRef = useRef(null);\n\n//   // ========================\n//   // üü¢ Inicializaci√≥n de sesi√≥n\n//   // ========================\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: { 'Authorization': `Bearer ${accessToken}` },\n//           });\n//           if (!response.ok) await refreshToken();\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   // ========================\n//   // üîÅ Sincronizar logout entre pesta√±as\n//   // ========================\n//   useEffect(() => {\n//     const syncLogout = (e) => {\n//       if (e.key === 'logout_event') {\n//         setUser(null);\n//         localStorage.removeItem('user');\n//         localStorage.removeItem('access_token');\n//         localStorage.removeItem('refresh_token');\n//       }\n//     };\n//     window.addEventListener('storage', syncLogout);\n//     return () => window.removeEventListener('storage', syncLogout);\n//   }, []);\n\n//   // ========================\n//   // ‚è∞ Control de inactividad\n//   // ========================\n//   useEffect(() => {\n//     if (!user) return;\n\n//     const resetInactivityTimers = () => {\n//       clearTimeout(inactivityTimerRef.current);\n//       clearTimeout(totalSessionTimerRef.current);\n//       clearInterval(countdownRef.current);\n//       setSessionExpiring(false);\n//       setCountdown(180);\n\n//       // ‚öôÔ∏è Despu√©s de 7 minutos ‚Üí mostrar aviso de expiraci√≥n\n//       //inactivityTimerRef.current = setTimeout(() => {\n//       //  setSessionExpiring(true);\n//       //  startCountdown();\n//       //}, 7 * 60 * 1000);\n//       // ‚öôÔ∏è Despu√©s de 10 minutos ‚Üí cerrar sesi√≥n autom√°ticamente\n//       //totalSessionTimerRef.current = setTimeout(() => {\n//       //  handleAutoLogout();\n//       //}, 10 * 60 * 1000);\n\n//       // ‚öôÔ∏è Despu√©s de 20 segundos ‚Üí mostrar aviso de expiraci√≥n (solo pruebas)\n//       inactivityTimerRef.current = setTimeout(() => {\n//         setSessionExpiring(true);\n//         startCountdown();\n//       }, 20 * 1000);\n\n//       // ‚öôÔ∏è Despu√©s de 30 segundos ‚Üí cerrar sesi√≥n autom√°ticamente (solo pruebas)\n//       totalSessionTimerRef.current = setTimeout(() => {\n//         handleAutoLogout();\n//       }, 30 * 1000);\n\n//     };\n\n//     const startCountdown = () => {\n//       let remaining = 180;\n//       countdownRef.current = setInterval(() => {\n//         remaining -= 1;\n//         setCountdown(remaining);\n//         if (remaining <= 0) {\n//           clearInterval(countdownRef.current);\n//         }\n//       }, 1000);\n//     };\n\n//     const handleAutoLogout = async () => {\n//       clearInterval(countdownRef.current);\n//       setSessionExpiring(false);\n//       await logout();\n//     };\n\n//     const handleUserActivity = () => {\n//     // üü° Si ya est√° apareciendo el aviso, no reiniciar nada\n//     if (sessionExpiring) return;\n//     resetInactivityTimers();\n//   };\n\n//   window.addEventListener('mousemove', handleUserActivity);\n//   window.addEventListener('keydown', handleUserActivity);\n//   window.addEventListener('scroll', handleUserActivity);\n//   window.addEventListener('click', handleUserActivity);\n\n//     return () => {\n//       window.removeEventListener('mousemove', resetInactivityTimers);\n//       window.removeEventListener('keydown', resetInactivityTimers);\n//       window.removeEventListener('scroll', resetInactivityTimers);\n//       window.removeEventListener('click', resetInactivityTimers);\n//       clearTimeout(inactivityTimerRef.current);\n//       clearTimeout(totalSessionTimerRef.current);\n//       clearInterval(countdownRef.current);\n//     };\n//   }, [user]);\n\n//   // ========================\n//   // üîÅ Extender sesi√≥n\n//   // ========================\n//   const extendSession = () => {\n//     setSessionExpiring(false);\n//     setCountdown(180);\n//     // reinicia los contadores\n//     const event = new Event('mousemove');\n//     window.dispatchEvent(event);\n//   };\n\n//   // ========================\n//   // üîê Funciones de autenticaci√≥n\n//   // ========================\n//   const login = async (email, password) => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/auth/login', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         localStorage.setItem('refresh_token', data.refresh_token);\n//         localStorage.setItem('user', JSON.stringify(data.user));\n//         setUser(data.user);\n//         return { success: true, user: data.user };\n//       } else {\n//         return { success: false, error: data.error || 'Error en el login' };\n//       }\n//     } catch (error) {\n//       return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: { 'Authorization': `Bearer ${token}` },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//       localStorage.setItem('logout_event', Date.now());\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: { 'Authorization': `Bearer ${refreshToken}` },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   // ========================\n//   // Render y modal\n//   // ========================\n//   return (\n//     <AuthContext.Provider value={{\n//       user,\n//       login,\n//       logout,\n//       hasPermission,\n//       loading,\n//       authFetch,\n//       sessionExpiring,\n//       countdown,\n//       extendSession\n//     }}>\n//       {children}\n\n//       {/* üîî Modal de expiraci√≥n */}\n//       {sessionExpiring && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\">\n//           <div className=\"bg-white p-6 rounded-2xl shadow-lg text-center max-w-sm\">\n//             <h2 className=\"text-lg font-semibold mb-2 text-gray-800\">Sesi√≥n a punto de expirar</h2>\n//             <p className=\"text-gray-600 mb-4\">\n//               Tu sesi√≥n se cerrar√° autom√°ticamente en <b>{countdown}s</b> por inactividad.\n//             </p>\n//             <div className=\"flex justify-center gap-4\">\n//               <button\n//                 onClick={extendSession}\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n//               >\n//                 Mantener sesi√≥n\n//               </button>\n//               <button\n//                 onClick={logout}\n//                 className=\"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\"\n//               >\n//                 Cerrar ahora\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </AuthContext.Provider>\n//   );\n// };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////","map":{"version":3,"names":[],"sources":["D:/Usuarios/FRANCO/Desktop/proyectoparroquia/parroquia-frontend/src/contexts/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Cargar usuario desde localStorage al inicio y verificar token\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n      \n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n        \n//         // Verificar si el token es v√°lido\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: {\n//               'Authorization': `Bearer ${accessToken}`,\n//             },\n//           });\n\n//           if (!response.ok) {\n//             // Token inv√°lido, intentar refrescar\n//             await refreshToken();\n//           }\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//         console.log('üîê Intentando login con:', email);\n        \n//         const response = await fetch('http://localhost:5000/api/auth/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password }),\n//         });\n\n//         const data = await response.json();\n//         console.log('üì¶ Respuesta del login:', data);\n\n//         if (response.ok) {\n//             console.log('‚úÖ Login exitoso. Tokens recibidos:');\n//             console.log('Access Token:', data.access_token ? 'S√ç' : 'NO');\n//             console.log('Refresh Token:', data.refresh_token ? 'S√ç' : 'NO');\n//             console.log('User:', data.user ? 'S√ç' : 'NO');\n            \n//             // Guardar en localStorage\n//             localStorage.setItem('access_token', data.access_token);\n//             localStorage.setItem('refresh_token', data.refresh_token);\n//             localStorage.setItem('user', JSON.stringify(data.user));\n            \n//             console.log('üíæ Token guardado en localStorage:', \n//                 localStorage.getItem('access_token') ? 'S√ç' : 'NO');\n            \n//             setUser(data.user);\n//             return { success: true, user: data.user };\n//         } else {\n//             console.log('‚ùå Error en login:', data.error);\n//             return { success: false, error: data.error || 'Error en el login' };\n//         }\n//     } catch (error) {\n//         console.log('üåê Error de conexi√≥n:', error);\n//         return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: {\n//             'Authorization': `Bearer ${token}`,\n//           },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': `Bearer ${refreshToken}`,\n//         },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         // üîß Si se genera un nuevo refresh token, reemplazar el anterior\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   // Funci√≥n para hacer requests autenticadas con refresh autom√°tico\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n    \n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     // Si el token expir√≥, intentar refrescar y reenviar la request\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ \n//       user, \n//       login, \n//       logout, \n//       hasPermission, \n//       loading,\n//       authFetch \n//     }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n// import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [sessionExpiring, setSessionExpiring] = useState(false);\n//   //const [countdown, setCountdown] = useState(180); // 3 minutos\n//   const [countdown, setCountdown] = useState(10); // 10 segundos (solo prueba)\n//   //\n//   const countdownRef = useRef(null);\n//   const inactivityTimerRef = useRef(null);\n//   const totalSessionTimerRef = useRef(null);\n\n//   // ========================\n//   // üü¢ Inicializaci√≥n de sesi√≥n\n//   // ========================\n//   useEffect(() => {\n//     const initializeAuth = async () => {\n//       const savedUser = localStorage.getItem('user');\n//       const accessToken = localStorage.getItem('access_token');\n\n//       if (savedUser && accessToken) {\n//         setUser(JSON.parse(savedUser));\n\n//         try {\n//           const response = await fetch('http://localhost:5000/api/users/profile', {\n//             method: 'GET',\n//             headers: { 'Authorization': `Bearer ${accessToken}` },\n//           });\n//           if (!response.ok) await refreshToken();\n//         } catch (error) {\n//           console.error('Error verificando token:', error);\n//           await logout();\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     initializeAuth();\n//   }, []);\n\n//   // ========================\n//   // üîÅ Sincronizar logout entre pesta√±as\n//   // ========================\n//   useEffect(() => {\n//     const syncLogout = (e) => {\n//       if (e.key === 'logout_event') {\n//         setUser(null);\n//         localStorage.removeItem('user');\n//         localStorage.removeItem('access_token');\n//         localStorage.removeItem('refresh_token');\n//       }\n//     };\n//     window.addEventListener('storage', syncLogout);\n//     return () => window.removeEventListener('storage', syncLogout);\n//   }, []);\n\n//   // ========================\n//   // ‚è∞ Control de inactividad\n//   // ========================\n//   useEffect(() => {\n//     if (!user) return;\n\n//     const resetInactivityTimers = () => {\n//       clearTimeout(inactivityTimerRef.current);\n//       clearTimeout(totalSessionTimerRef.current);\n//       clearInterval(countdownRef.current);\n//       setSessionExpiring(false);\n//       setCountdown(180);\n\n//       // ‚öôÔ∏è Despu√©s de 7 minutos ‚Üí mostrar aviso de expiraci√≥n\n//       //inactivityTimerRef.current = setTimeout(() => {\n//       //  setSessionExpiring(true);\n//       //  startCountdown();\n//       //}, 7 * 60 * 1000);\n//       // ‚öôÔ∏è Despu√©s de 10 minutos ‚Üí cerrar sesi√≥n autom√°ticamente\n//       //totalSessionTimerRef.current = setTimeout(() => {\n//       //  handleAutoLogout();\n//       //}, 10 * 60 * 1000);\n\n//       // ‚öôÔ∏è Despu√©s de 20 segundos ‚Üí mostrar aviso de expiraci√≥n (solo pruebas)\n//       inactivityTimerRef.current = setTimeout(() => {\n//         setSessionExpiring(true);\n//         startCountdown();\n//       }, 20 * 1000);\n\n//       // ‚öôÔ∏è Despu√©s de 30 segundos ‚Üí cerrar sesi√≥n autom√°ticamente (solo pruebas)\n//       totalSessionTimerRef.current = setTimeout(() => {\n//         handleAutoLogout();\n//       }, 30 * 1000);\n\n\n\n//     };\n\n//     const startCountdown = () => {\n//       let remaining = 180;\n//       countdownRef.current = setInterval(() => {\n//         remaining -= 1;\n//         setCountdown(remaining);\n//         if (remaining <= 0) {\n//           clearInterval(countdownRef.current);\n//         }\n//       }, 1000);\n//     };\n\n//     const handleAutoLogout = async () => {\n//       clearInterval(countdownRef.current);\n//       setSessionExpiring(false);\n//       await logout();\n//     };\n\n//     const handleUserActivity = () => {\n//     // üü° Si ya est√° apareciendo el aviso, no reiniciar nada\n//     if (sessionExpiring) return;\n//     resetInactivityTimers();\n//   };\n\n//   window.addEventListener('mousemove', handleUserActivity);\n//   window.addEventListener('keydown', handleUserActivity);\n//   window.addEventListener('scroll', handleUserActivity);\n//   window.addEventListener('click', handleUserActivity);\n\n\n//     return () => {\n//       window.removeEventListener('mousemove', resetInactivityTimers);\n//       window.removeEventListener('keydown', resetInactivityTimers);\n//       window.removeEventListener('scroll', resetInactivityTimers);\n//       window.removeEventListener('click', resetInactivityTimers);\n//       clearTimeout(inactivityTimerRef.current);\n//       clearTimeout(totalSessionTimerRef.current);\n//       clearInterval(countdownRef.current);\n//     };\n//   }, [user]);\n\n//   // ========================\n//   // üîÅ Extender sesi√≥n\n//   // ========================\n//   const extendSession = () => {\n//     setSessionExpiring(false);\n//     setCountdown(180);\n//     // reinicia los contadores\n//     const event = new Event('mousemove');\n//     window.dispatchEvent(event);\n//   };\n\n//   // ========================\n//   // üîê Funciones de autenticaci√≥n\n//   // ========================\n//   const login = async (email, password) => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/auth/login', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         localStorage.setItem('refresh_token', data.refresh_token);\n//         localStorage.setItem('user', JSON.stringify(data.user));\n//         setUser(data.user);\n//         return { success: true, user: data.user };\n//       } else {\n//         return { success: false, error: data.error || 'Error en el login' };\n//       }\n//     } catch (error) {\n//       return { success: false, error: 'Error de conexi√≥n con el servidor' };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         await fetch('http://localhost:5000/api/auth/logout', {\n//           method: 'POST',\n//           headers: { 'Authorization': `Bearer ${token}` },\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error durante logout:', error);\n//     } finally {\n//       setUser(null);\n//       localStorage.removeItem('user');\n//       localStorage.removeItem('access_token');\n//       localStorage.removeItem('refresh_token');\n//       localStorage.setItem('logout_event', Date.now());\n//     }\n//   };\n\n//   const refreshToken = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem('refresh_token');\n//       if (!refreshToken) {\n//         await logout();\n//         return false;\n//       }\n\n//       const response = await fetch('http://localhost:5000/api/auth/refresh', {\n//         method: 'POST',\n//         headers: { 'Authorization': `Bearer ${refreshToken}` },\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('access_token', data.access_token);\n//         if (data.refresh_token) {\n//           localStorage.setItem('refresh_token', data.refresh_token);\n//         }\n//         if (data.user) {\n//           setUser(data.user);\n//           localStorage.setItem('user', JSON.stringify(data.user));\n//         }\n//         return true;\n//       } else {\n//         await logout();\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error('Error refrescando token:', error);\n//       await logout();\n//       return false;\n//     }\n//   };\n\n//   const hasPermission = (permission) => {\n//     if (!user || !user.permissions) return false;\n//     return user.permissions.includes(permission);\n//   };\n\n//   const authFetch = async (url, options = {}) => {\n//     let token = localStorage.getItem('access_token');\n//     const config = {\n//       ...options,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...options.headers,\n//         'Authorization': `Bearer ${token}`,\n//       },\n//     };\n\n//     let response = await fetch(url, config);\n\n//     if (response.status === 401) {\n//       const refreshed = await refreshToken();\n//       if (refreshed) {\n//         token = localStorage.getItem('access_token');\n//         config.headers.Authorization = `Bearer ${token}`;\n//         response = await fetch(url, config);\n//       }\n//     }\n\n//     return response;\n//   };\n\n//   // ========================\n//   // Render y modal\n//   // ========================\n//   return (\n//     <AuthContext.Provider value={{\n//       user,\n//       login,\n//       logout,\n//       hasPermission,\n//       loading,\n//       authFetch,\n//       sessionExpiring,\n//       countdown,\n//       extendSession\n//     }}>\n//       {children}\n\n//       {/* üîî Modal de expiraci√≥n */}\n//       {sessionExpiring && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\">\n//           <div className=\"bg-white p-6 rounded-2xl shadow-lg text-center max-w-sm\">\n//             <h2 className=\"text-lg font-semibold mb-2 text-gray-800\">Sesi√≥n a punto de expirar</h2>\n//             <p className=\"text-gray-600 mb-4\">\n//               Tu sesi√≥n se cerrar√° autom√°ticamente en <b>{countdown}s</b> por inactividad.\n//             </p>\n//             <div className=\"flex justify-center gap-4\">\n//               <button\n//                 onClick={extendSession}\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n//               >\n//                 Mantener sesi√≥n\n//               </button>\n//               <button\n//                 onClick={logout}\n//                 className=\"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\"\n//               >\n//                 Cerrar ahora\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </AuthContext.Provider>\n//   );\n// };\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}